Prepared packets you can send (faster since they are prepared only once)
(These are static methods in SteamEngine.Packets.Prepared):
	SendPickUpFailed(GameConn c, PickupFailedMessage msg)
	SendGodMode(GameConn c)		//uses c.GodMode
	SendGodMode(GameConn c, bool enabled)
	SendHackMove(GameConn c)	//uses c.HackMove
	SendHackMove(GameConn c, bool enabled)
	SendTargettingCursor(GameConn c, bool ground) 
	SendCancelTargettingCursor(GameConn c)
	SendWarMode(GameConn c, AbstractCharacter character)	//uses character.Flag_WarMode
	SendWarMode(GameConn c, bool enabled)
	SendRejectDeleteRequest(GameConn c, DeleteRequestReturnValue msg)
	SendFailedLogin(GameConn c, FailedLoginReason msg)
Each corresponds to a similarly named method in PacketSender (Specifically, instead of "Send" they begin with "Prepare").	


Packets you can send (These are static methods in SteamEngine.Packets.PacketSender):
	Method name and parameters								Packet ID	Comments
	--------------------------								---------	--------
	PrepareRemoveFromView(Thing thing)						0x1d
	PrepareRemoveFromView(int uid)							0x1d
	PrepareVersions(uint[] vals)							0x3e		God-client, purpose and use uncertain
	PreparePaperdollItem(Equippable item)					0x2e
	PrepareMountInfo(AbstractCharacter rider)				0x2e		Used when a character gets on a mount.
	PrepareUpdateStats(AbstractCharacter cre, bool showReal)
															0x2d
	PrepareUpdateHitpoints(AbstractCharacter cre, bool showReal)
															0xa1
	PrepareUpdateMana(AbstractCharacter cre, bool showReal)	0xa2
	PrepareUpdateStamina(AbstractCharacter cre, bool showReal)
															0xa3
	PrepareStatusBar(AbstractCharacter cre, StatusBarType type)
															0x11
	PrepareInitialPlayerInfo(AbstractCharacter chr)			0x1b
	PrepareUnicodeMessage(Thing from, ushort model, string sourceName, string msg, SpeechType type, ushort font, ushort color, string language)
															0xae		'from' can be null.
	PrepareAsciiMessage(Thing from, ushort model, string sourceName, string msg, SpeechType type, ushort font, ushort color)
															0x1c		'from' can be null.
	SendLocationInformation(GameConn conn)					0x20		This is "Send" instead of "Prepare" and takes a
																		GameConn because the client resets its move sequence
																		number to zero when it gets this packet, and the
																		server has to do the same for that client's
																		server-side move sequence number, or they will
																		get out of sync and the client will appear to
																		freeze. This method resets that, so that you
																		don't have to remember to when you call it.
																		Also, this packet is never sent to more than
																		one client at a time, so it is safe to prepare
																		and send and discard it in one step.
	SendBadMove(GameConn c)									0x21		This is "Send" because it also has to read and
																		modify moveSeqNum on the conn.
	SendGoodMove(GameConn conn)								0x22		Same reason.
	PrepareOpenContainer(Container cont)					0x24
	PrepareContainerContents(Container cont)				0x3c
	PrepareItemInContainer(Item i)							0x25
	PrepareDoneShowPaperdoll()								0x29		(Marked obsolete because the client doesn't
																		actually need to be sent this)
	PrepareUpdateStatics(ushort x, ushort y, byte m, Static[] statics, uint version)
															0x3f		God-Client (Doesn't work with normal clients?)
	PreparePickUpFailed(PickupFailedMessage msg)			0x27		There are a number of messages for this which
																		we don't use currently.
	PrepareDropFailed(Thing thing)							0x28		(Marked obsolete because it doesn't actually seem
																		to do anything, and the client doesn't need it
																		anyways)
	SendGodMode(GameConn conn)								0x2b
	PrepareGodMode(bool godMode)							0x2b
	SendHackMove(GameConn conn)								0x32
	PrepareHackMove(GameConn conn)							0x32
	PrepareTargettingCursor(bool ground)					0x6c
	PrepareCancelTargettingCursor()							0x6c
	PrepareWarMode(AbstractCharacter cre)					0x72
	PrepareWarMode(bool warMode)							0x72
	PrepareForceMove(AbstractCharacter cre, bool running)	0x97		Experimental.
	SendRejectDeleteRequest(GameConn conn, DeleteRequestReturnValue reason)
															0x85
	PrepareRejectDeleteRequest(DeleteRequestReturnValue reason)
															0x85
	PrepareItemInformation(Item item, MoveRestriction restrict)			MoveRestriction lets you specify 'Normal',
															0x1a		or to override movability, 'Movable' or
																		'Immovable').
	PrepareItemInformation(Item item)						0x1a		Calls the preceding method with restrict=Normal.
	PrepareSpecialHighlight(AbstractCharacter cre, byte amount)		0xc4
	PrepareMovingCharacter(AbstractCharacter chr, IPoint4D point, bool running)
															0x77
	PrepareCharacterInformation(AbstractCharacter cre)		0x78
	PrepareCharacterInformation(AbstractCharacter cre, IPoint3D overrideCoords)
	SendFailedLogin(GameConn c, FailedLoginReason reason)	0x82
	PrepareFailedLogin(FailedLoginReason reason)			0x82
	SendCharacterListAfterDelete(GameConn c)				0x86
	PreparePaperdoll(AbstractCharacter character)					0x88
	SendLoginToServer(GameConn c, byte server)				0x8c
	SendServersList(GameConn c)								0xa8
	SendCharList(GameConn c)								0xa9
	PrepareEnableFeatures(ushort features)					0xb9
	PrepareSeasonAndCursor(byte season, byte cursor)		0xbc
	PrepareSound(Thing source, SoundFX sound)				0x54
	PrepareStartGame()										0x55
	PrepareAnimation(AbstractCharacter cre, byte anim, ushort numBackwardsFrames, ushort numAnims, bool backwards, bool undo, byte frameDelay)
															0x6e		Note that Jerrith's packet guide has INCORRECT
																		information about this packet. So does Kair's, but
																		that may get fixed. This packet isn't in mine yet,
																		but will be accurate when it is, since I've
																		commented the PrepareAnimation method heavily.
	PrepPrepareEffect(IPoint6D source, IPoint6D target, byte type, ushort effect, byte speed, byte duration, ushort unk, byte fixedDirection, byte explodes, uint hue, uint renderMode)
		And overloads which take IPoint3Ds instead of IPoint6Ds for source and/or target.
															0xc0		According to Jerrith's packet guide, the 'unk'
																		variable is (or was) used on OSI. I haven't tested
																		'unk' to see if it is useful for anything, though.
																		Mind you, Jerrith's doesn't mention an 'unk'
																		variable, that was me abbreviating 'unknown'.
	SendInitFastwalk(GameConn c)							0xbf 0x01
	SendAddFastwalkKey(GameConn c)							0xbf 0x02
	SendUpdateRange(GameConn c, byte updateRange)			0xc8
	PrepareMovingItemAnimation(IItemState former, IItemState current)
	PrepareMovingItemAnimation(IItemState former, IItemState current, ushort amount)
	PrepareMovingItemAnimation(IItemState former, IItemState current, IPoint6D formerP, IPoint6D currentP)
	PrepareMovingItemAnimation(IItemState former, IItemState current, IPoint6D formerP, IPoint6D currentP, ushort amount)
															0x23
	PrepareCharacterName(AbstractCharacter character)		0x98		Do not use yet, it crashes the client. (But if
																		AOS is enabled correctly, it ought not to)
	PrepareStatLock(AbstractCharacter chr)					0xbf 0x19
	PrepareClilocMessage(Thing from, uint msg, SpeechType type, ushort font, ushort color, params string[] args)
															0xc1
	PrepareCloseGump(uint gumpUid, int buttonId)			0xbf 0x04