//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.42
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace SteamEngine.CompiledScripts {
	using System;
	using System.Collections;
	using System.Collections.Generic;
	using SteamEngine;
	using SteamEngine.Timers;
	using SteamEngine.Packets;
	using SteamEngine.Persistence;
	using SteamEngine.Common;
	
	
	public partial class BerserkerPluginDef : PluginDef {
		
		public BerserkerPluginDef(String defname, String filename, Int32 headerLine) : 
				base(defname, filename, headerLine) {
		}
		
		protected override SteamEngine.Plugin CreateImpl() {
			return new BerserkerPlugin();
		}
		
		public new static void Bootstrap() {
			SteamEngine.PluginDef.RegisterPluginDef(typeof(BerserkerPluginDef), typeof(BerserkerPlugin));
		}
	}
	
	[SteamEngine.DeepCopyableClassAttribute()]
	[SteamEngine.Persistence.SaveableClassAttribute()]
	public partial class BerserkerPlugin : Plugin {
		
		public Double damageModifier = 1.0;
		
		[SteamEngine.DeepCopyImplementationAttribute()]
		public BerserkerPlugin(BerserkerPlugin copyFrom) : 
				base(copyFrom) {
			this.damageModifier = copyFrom.damageModifier;
		}
		
		[SteamEngine.Persistence.LoadingInitializerAttribute()]
		public BerserkerPlugin() {
		}
		
		public new BerserkerPluginDef TypeDef {
			get {
				return ((BerserkerPluginDef)(base.Def));
			}
		}
		
		[SteamEngine.Persistence.SaveAttribute()]
		public override void Save(SaveStream output) {
			if ((this.damageModifier != 1.0)) {
				output.WriteValue("damageModifier", this.damageModifier);
			}
			base.Save(output);
		}
		
		[SteamEngine.Persistence.LoadLineAttribute()]
		public override void LoadLine(string filename, int line, string valueName, string valueString) {
			switch (valueName) {

				case "damagemodifier":
			this.damageModifier = SteamEngine.Common.ConvertTools.ParseDouble(valueString);
					break;

				default:

			base.LoadLine(filename, line, valueName, valueString);
					break;
			}
		}
	}
}
