//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.832
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace SteamEngine.CompiledScripts {
	using System;
	using System.Collections;
	using System.Collections.Generic;
	using SteamEngine;
	using SteamEngine.Timers;
	using SteamEngine.Packets;
	using SteamEngine.Persistence;
	using SteamEngine.Common;
	
	
	public partial class SpellBookDef : EquippableDef {
		
		private FieldValue firstSpellId;
		
		public SpellBookDef(String defname, String filename, Int32 headerLine) : 
				base(defname, filename, headerLine) {
			this.firstSpellId = this.InitField_Typed("firstSpellId", 1, typeof(Int32));
		}
		
		public Int32 FirstSpellId {
			get {
				return ((Int32)(this.firstSpellId.CurrentValue));
			}
			set {
				this.firstSpellId.CurrentValue = value;
			}
		}
		
		protected override SteamEngine.Thing CreateImpl() {
			return new SpellBook(this);
		}
		
		public new static void Bootstrap() {
			SteamEngine.ThingDef.RegisterThingDef(typeof(SpellBookDef), typeof(SpellBook));
		}
	}
	
	[SteamEngine.DeepCopyableClassAttribute()]
	[SteamEngine.Persistence.SaveableClassAttribute()]
	public partial class SpellBook : Equippable {
		
		public UInt64 contents = 0;
		
		[SteamEngine.DeepCopyImplementationAttribute()]
		public SpellBook(SpellBook copyFrom) : 
				base(copyFrom) {
			this.contents = copyFrom.contents;
		}
		
		public SpellBook(ThingDef myDef) : 
				base(myDef) {
		}
		
		public new SpellBookDef TypeDef {
			get {
				return ((SpellBookDef)(base.Def));
			}
		}
		
		public override void Save(SaveStream output) {
			if ((this.contents != 0)) {
				output.WriteValue("contents", this.contents);
			}
			base.Save(output);
		}
		
		public override void LoadLine(string filename, int line, string valueName, string valueString) {
			switch (valueName) {

				case "contents":
			this.contents = SteamEngine.Common.ConvertTools.ParseUInt64(valueString);
					break;

				default:

			base.LoadLine(filename, line, valueName, valueString);
					break;
			}
		}
	}
}
