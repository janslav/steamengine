[function test_los]
this.Target(targ_lostest)


//experimental implementation. 
//If successful, then it shall be hardcoded in core, but is gonna be left here for later optimisation etc.
[function f_create_los_path] //argv0 = origin, argv1 = destination
arg.path = CreateList(typeof(Point3D))


arg.org = <argv[0]>
arg.dest = <argv[1]>

arg.start = arg.org;
arg.end = arg.dest;

if( org.X > dest.X || (org.X == dest.X && org.Y > dest.Y) || (org.X == dest.X && org.Y == dest.Y && org.Z > dest.Z) )

	arg.swap = org;
	arg.org = dest;
	arg.dest = swap;
endif

//if ( org == dest )
//	return true;

//if( path.Count > 0 )
//	path.Clear();

arg.xd = dest.X - org.X;
arg.yd = dest.Y - org.Y;
arg.zd = dest.Z - org.Z;
arg.zslp = System.Math.Sqrt( xd * xd + yd * yd );
if( zd != 0 )
	arg.sq3d = System.Math.Sqrt( zslp * zslp + zd * zd );
else
	arg.sq3d = zslp;
endif

arg.rise = yd / sq3d;
arg.run = xd / sq3d;
arg.zslp = zd / sq3d;

echo("rise:<rise>, run:<run>, zslp:<zslp>")

arg.y = org.Y * 1.0;
arg.z = org.Z * 1.0;
arg.x = org.X * 1.0;

while( f_NumberBetween( x, dest.X, org.X, 0.5 ) && f_NumberBetween( y, dest.Y, org.Y, 0.5 ) && f_NumberBetween( z, dest.Z, org.Z, 0.5 ) )

	arg.ix = System.Math.Round( x );
	arg.iy = System.Math.Round( y );
	arg.iz = System.Math.Round( z );
	
	if( path.Count > 0 )
	
		//arg.p = path[path.Count-1];

		//if( p.X != ix || p.Y != iy || p.Z != iz )
			arg.path.Add( Point3D(ix, iy, iz) );
		//endif
	else
	
		path.Add( Point3D(ix, iy, iz) );
	endif
	arg.x = x + run;
	arg.y = y + rise;
	arg.z = z + zslp;
endwhile

return path


[function f_display_los_path]
foreach (p in <argv[0]>)
	i_floor_wood.Create(p.x, p.y, p.z, src.m).AddTimer(%decay, 5, delete)
endforeach


[function f_NumberBetween] //( double num, int bound1, int bound2, double allowance )
if ( argv[1] > argv[2] )
	arg.i = argv[1];
	argv[1] = argv[2];
	argv[2] = i;
endif

if ((<argv[0]><<argv[2]>+<argv[3]>) && (<argv[0]>><argv[1]>-<argv[3]>))
	return true
endif
return false





[ScriptedTargetDef targ_lostest]
message="Target LOS test point/object..."

on=@targon_point
	//sysmessage("You targetted <argv(0)>, parameter <argv(1)>")
	
	arg.path = f_create_los_path(<src>, <argv[0]>)
	f_display_los_path(arg.path)
	

	return 0



[eof]