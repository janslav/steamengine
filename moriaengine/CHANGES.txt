
Jul 29, 2007
	added: CompiledScriptHolder.cs, GeneratedCodeUtil.cs, ScriptedTriggerGroup.cs, CompiledTriggerGroup.cs
	removed: MIScriptHolder.cs, CompiledScript.cs
	changed: TriggerGroup, ClassManager, atd.
	(tar)		Odstranena reflexe z volani kodu pro kompilovanty triggergroupy a funkce.
		Nahrazena generovanym kodem. Taky zmenen zpusob deklarace globalnich funkci - misto def_ metody v potomkovi 
		CompiledScriptu se ted za globalni funkci povazuje libovolna staticka metoda s atributem [SteamFunction]
		Stavajici kod (tj. existujici funkce ve skriptech) predelan odpovidajicim zpusobem.
		TriggerGroup uz neni nutne fyzicky kolekce ScriptHolderu, nybrz je to abstraktni trida s metodami
		(Try)Run(object, TriggerKey, ScriptArgs) coz umoznuje vytvaret i nejaky lehce dynamictejsi triggergroupy
		Zatim vyuzito jen v E_Test_all_generic
		
		(...mezitim taky pracuju na combatu ale to sem nepatri ;)

Apr 30, 2007
	added: classtemplates/Corpse.cs
	changed: classtemplates/Character.cs, src/UIDArray.cs, src/Packets/* etc.
	(tar)		Zprovoznena smrt :) tj. Kill (nebo hits=0) a Resurrect uz funguji.
		Pochopitelne ne do detailu ale to se dodela casem ;)

Apr 27, 2007
	Prechod na SVN

Apr 24, 2007
	added: ObjectPropertiesContainer.cs, CacheDictionary.cs
	changed: NetState.cs, Thing+potomci
	(tar)		Po dlouhem boji implementovany AOS tooltips. Nekdy o tom mozna napisu nejakej tutorial, zatim
		jsou pouzity v Container.cs na zobrazeni poctu itemu

Apr 10, 2007
	added: LScript\OpNode_Typeof.cs
	(tar)		Pridano typeof a is do LScriptu. Funkce stejna jako v C#.

Apr 5, 2007
	added: scripts/systems/AI/AStar.cs, scripts/classes/PriorityQueue.cs, scripts/classes/HashSet.cs
	(tar)		Implementovan pathfinding. Jestli to bude pomaly, zustava dost moznosti optimalizace.
		Kazdopadne to funguje ;)

Mar 31, 2007
	fsechno!!!1 Ne vazne... ;) Taky sem treba zakomentoval kolikuv inputdialog, bo tak jak byl byl spatne... mozna uz to predelal.
	(tar)		Dramaticky zmenen vyznam promenne Globals.src ;)
		Src je ted (skutecne pouze) zdroj spusteni aktualniho skriptu - prikazem nebo packetem. Nebo je to null v pripade timeru.
		Zaroven Src dosud plnil vyznam jinych dilcich promennych (napriklad v @dclick triggeru byl src onen Character
		kterej dkliknul na danej objekt. Ted je klikajici prvni parametr @dclick triggeru.), a to uz neplati. Jinymi slovy 
		V mnohych triggerech pribyl jeden parametr, cimz se mimo jine lehce poztracela nejaka ta zpetna kompatibilita se sferou... nu coz ;)

Mar 29, 2007
	Movement.cs atd.
	(tar)		Opsan a upraven kod Movement checku z RunUO ;) jeste zbyva otestovat ruzna nastaveni
		(plavani, brodeni lavouo, litani), ale jinak to vypada funkcne. Testovano pomoci GodClienta.

Mar 26, 2007
	source-wide revize
	(tar)		Zrevidovan exception handling. Do .ini pridana volba ShowCoreExceptions, ktera se da prepinat i za behu
		(Globals.ShowCoreExceptions = true/false) a urcuje jestli se zobrazuje ta cast StackTrace vyjimek ktera se nachazi
		mimo skripty. Tj. uz zpusob zobrazovani vyjimek nezalezi na DEBUG/SANE buildu, a vzdycky se zobrazuje maximum
		informaci (tedy jak soubor/radek v LScriptu tak v C# kodu, atd.) Standardni Exception handler ted vypada takto:
		try {
			...
		} catch (FatalException) { throw; }
		} catch (Exception e) {
			Logger.WriteError(e); //pripadne WriteError("nejakej ten text", e); //pripadne WriteError("soubor", 5, e);
		}


Mar 23, 2007
	src/MultiData.cs, scripts/classtemplates/MultiItem.cs+ct
	(tar)		Hotovej zaklad multiitemu. V tuhle chvili je lze pridavat pres .Add (i s obrazkem na kurzoru)
		s tim ze si s sebou vytvorej i svoje scriptovy COMPONENTS a jejich seznam si uchovavaj v poli
		Jadro si v sektorech udrzuje seznamy statickych komponentu s multiitemama sdruzenych 
		(pro movement/los checky atd.), a do IPoint4D pribyly novy enumeracni metody pro MultiComponents

Mar 17, 2007
	scripts/systems/db/DbManager.cs, DbMethods.cs, DbUtils.cs
	(tar)		Zaklad frameworku pro pripojeni k MySQL databazi. Ucelem bude export dat pro web (status), 
		vcetne casto pouzivanych logu pro ip analyzu (login/out) nebo sledovani pohybu itemu (pickup, drop, etc.)
		Zamerem je, ze tyto analyzy budou probihat s nejakym uzasnym rozhranim pres web s pristupem pro urcene GM.
		Implementoval sem prave ty loginy/logouty, zbytek je v TODO jako idealni zacatek pro nejakyho novyho skriptera ;)

Mar 12, 2007 
	scripts/systems/dialogs/Input.cs
	(Dinivan)	Input dialog jakožto [InputDef ...] sekce pro LScript a dialog pro C# script - obdobne jako TargetDef

Mar 6, 2007
	scripts/systems/dialogs/...
	(Dinivan)	GUTA - GUmp TAbles dialog framework - vice bude (nebo uz je) popsano na wiki

Feb 26, 2007
	scripts/classes/Target.cs
	(tar)		Zavedena novinka - ScriptedTargetDef a CompiledTargetDef jako moznost skriptovani Targetu v Lscriptu i C#
		Pro priklad uziti viz scripts/Tests/TargetDefTest.cs a TargetDefTest.scp

Feb 21, 2007
	AbstractScript.cs, AbstractDef.cs a vsichni potomci
	(tar)		radikalne zmenena hierarchie objektu. Region je ted TagHolder (nikoli AbstractDef), AbstractDef je ted
		AbstractScript a ITagHolder (nikoli TagHolder), a TriggerGroup je ted AbstractScript spolu s Gumpem.
		Navic pribyla trida AbstractDefTriggerGroupHolder.cs ktera duplikuje Triggeroidni funcionalitun TagHolderu
	
	Regions.cs
	(tar)		V souvislosti s predchazejici zmenou - Regiony uz nejsou ve skriptu, jsou kompletne v save, a daj se
		exportovat/importovat (coz je zcela nova feature steamenginu a bude pouzita i na dalsi tridy a entity, popisu pozdeji)

Feb 20, 2007
	Globals.cs, Timer.cs, Main.cs
	(tar)		vytvorena globalni promenna servertime, ktera zaznamenava stari shardu :) Timery navazany na tuto promennou
		(nevim proc sem to tak neudelal rovnou - dyt to ma i ta blba sfera :)

Feb 19, 2007
	DecoratedClassesSaveImplementor.cs
	(tar)		DecoratedClassesSaveImplementory se ted generujou jako C# kod, cimz byla eliminovana posledni stopa
		reflexniho .Invoke z loadovani sveta. Celkem fuska :)

Feb 18, 2007
	LScript\*
	(tar)		Overhaul kodu argumentu v lscriptech. Lehce se pozmenily vlastnosti ale hlavne uz to jde indexovat.
		Pisu wiki clanek na toto tema :)

	Sector.cs, Map.cs, AbstractCharacter.cs, AbstractItem.cs, Thing.cs, ThingLinkedList.cs
	(tar)		ItemCollection je ted ThingLinkedList a uz se nepouziva jen v kontejnerech ale i v sektorech.
		I seznam Players je ted v sektorech jako linkedlist, takze se razem pristupova narocnost v 
		sektorech zmenila z O(n) na O(1) ;) Hlavne na to proboha nikdo nesahejte.

Feb 17, 2007
	GameConn.cs
	(tar)		prepsana speedhack ochrana

Feb 17, 2007
	*UberEnumerator*
	(tar)		Smazany vsechny stopy po Uberenumerator funkcionalite. Nikdy se mi to nelibilo bo sem tomu nerozumel
		(autorem byl Shadowlord) a uz je to zastaraly. Veskera ta hruza ve trech souborech sla nahradit 
		par radkama elegantniho kodu pomoci yield return (coz je novinka v C# 2.0). I kdyz ve skutecnosti kod 
		vygenerovanej kompilerem v pozadi je velice podobnej tomu co tam bylo, ale co oci nevidi... ;)
		Zajimalo by mne co bylo lepsi z hlediska vykonnostniho ale ne zas tak moc abych kvuli tomu delal nejaky testy :)

	GameAccount.cs
	(tar)		vypusteno uid, misto UidArray pouzivam Dictionary
	
	UIDArray.cs
	(tar)		udelano jako generic trida, i kdyz se ted pouziva jen na Thingy, iterator predelan pres yield return
	
	scripts/kdeco
	(tar)		reorganizovany skripty - administration a skills a skripty v rootu presunuty do Systems nebo classes
		Takze ted v rootu /scripts uz zadny skripty nejsou, jen textaky
		
	GameConn.cs, GameAccount.cs, AbstractCharacter.cs, Character.cs, Timer/*
	(tar)		Prepsan, otestovan a popsan (wiki) system pripojovani/odpojovani hracu a mozne mezistavy.
		Pri te prilezitosti vytvoren CharLingeringTimer, cimz sem zaroven overil ze lze jednoduse vytvaret novy potomky
		tridy Timer.

Feb 16, 2007
	LScript\MemberResolver.cs
	(tar)		Ve vetsine pripadu vyreseno "ambiguity detected".
	 	Tj. uz lze mit pretizeny metody napriklad s typama parametru Point4D a IPoint4D, a LScript vybere tu spravnou.

Feb 14, 2007
	ConvertedDef.cs, ConvertedRegion.cs, ConvertedThingDef.cs, SteamConsole.cs, WinConsoleForm.cs, default.build
	(tar)		Converter se ted builduje pres Nant jako vsechno ostatni (a opet funguje)

Feb 6, 2007
	Common/NantLauncher.cs, distrib\nant\default.build, ClassManager.cs, CompilerInvoker.cs, ObjectSaver.cs
	(tar)		skripty se kompilujou pres NAnt

Jan 30, 2007
	CompiledGump.cs, Gump.cs, GumpBuilder.cs, ScriptedGumpDef.cs, InPackets.cs
	(tar)		pridano numberTextEntry do gumpu. Pousiva se to stejne jako TextEntry akoratze jak defaultni tak navracena hodnota jsou cisla.
		Jadro samo vraci hracovi dialog dokud tam skutecne nejaky cislo nenapise :) A pritom dokonce zachovava text co tam uz napsal.

Jan 29, 2007
	(tar)		zruseno Worldsaver.currentfile, veskera jmena souboru (at uz skriptu nebo savefajlu) se ted predavaj jako
		parametry dotycnych funkci. Takhle to dopadne kdyz se clovek opovazi pouzivat globalni promennou :)

Jan 21, 2007
	/CompiledScripts/classtemplates
	(tar)		zrusena reflexe z generovaneho kodu (classtemplate) loadingu  promennych

Jan 15, 2007
	TagHolder.cs
	(tar)		metoda ListTags()
	
	LScript/*
	(tar)		Implementovano tag/var/arg.exists(nazev)
	
	ClassTemplate
	(tar)		Sice to jeste nemam uplne hotovy ale commituju to zaroven s ostatnim - zmenen system classtemplatu tak aby se generovaly 
		do souboru oddelenyho od uzivatelskyho kodu (tj. partial class), jeste je treba predelat saving/loading aby se tam 
		nepouzivala nadbytecne reflexe
	

Oct 24, 2006
	scripts/classes/Saving/StaticMemberSaver.cs
	(tar)		implementovana trida StaticMemberSaver, ktera umoznuje oznacit libovolnej statickej
	field nebo property jako urcenou k ukladani do a nahravani ze save. Prvni vyuziti bude zrejme k seznamu
	blokovanych adres, dale treba seznam GM Pages atd.
	Uklada se to hashtabli ktera se nacpe pres Globals.Instance.tag(SavedStaticMembersTable) do globals.sav
	Je to trosku podvod protoze hned po tom co je pouzit k ulozeni/loadnuti, je dotycnej tag smazanej :)

	scripts/classes/Saving/HashtableSaver.cs, scripts/classes/Saving/GenericListSaver.cs
	(tar) Taky bylo treba (pro tyto a mozna i jine ucely) implementovat savovani tridy Hashtable, 
		a prihodil sem i generickej list (tj. List<nejakejtyp>)



presunuto CVS, reorganizovany skripty, atd.

a tady zacina moriaengine :)
--------------------------------------------------------------------------------


May 22, 2006
	(tar)		nice pause, eh?
	converted the whole thing to .NET 2.0

Nov 6, 2005
	Lscript/OpNode_Final_TemplateItem.cs, scripts/.../Templatedef.cs, ThingDef.cs
	(tar)		Rewrote templates using LScript, TemplateDef and ThingDef are now IThingFactory
		ThingFactory is a new interface, has two methods - Create(Thing) and Create(x, y, z, m)

Oct 20, 2005
	3rdParty/Encryption/*, GameConn.cs, PacketHandler.cs
	(tar)		Added support for encrypted clients. Got it almost for free, because I used 
		DarkStorm's implementation for RunUO ;)

Oct 16, 2005
	Commands.cs, scripts/.../CommandsAuthorization.cs, ...
	(tar)		Simple command parser for players done. It's faster (and possibly more secure) than using the lscript.
		Lscript will be used only for console and Gm commands.
		Also did the authorization of the commands, i.e. who can run which commands etc.
		For now only based on name of the command, should be enough.

Oct 13, 2005
	Server.cs, Globals.cs, AbstractCharacter.cs, ConsConn.cs, Commands.cs, etc.
	(tar)		Server.src and Server.srcConn is now Globals.src, of type ISrc, which is implemented
		by AbstractCharacter and ConsConn.

Oct 12, 2005
	Commands.cs
	(tar)		x.something commands work now
	
	Thing.cs and subclasses
	(tar)		moved Weight, Title, and other properties to scripts
		doubled and tripled Get-methods and properties cleared, there is now just one property of each ;)

Oct 9, 2005
	NetState.cs, ...
	(tar)		NetState rewrite. phew.

Oct 1, 2005
	MemberWrapper.cs
	(tar)		MemberWrapper rewrite: it now generates MemberInfo subclasses,and should be safer.

Sept 13, 2005
	Exceptions.cs, GenericMulReader.cs, Globals.cs, Main.cs, MultiData.cs, SoundMul.cs, StaticSector.cs, TileData.cs, Utility.cs, ConsConn.cs, GameAccount.cs, InPackets.cs, LowLevelOut.cs, PacketBase.cs, Server.cs
	(kemoc) GenericMulReader replaced by BinaryReader (SoundMul.cs, StaticSector.cs, Tiledata.cs, ), removed GenericMulReader exceptions from Exceptions.cs
		New method for reading null terminated strings from muls (Utility.cs)
		Class holding info about multiItems (MultiData.cs) and related changes in other files (Globals.cs, Main.cs) 
		Instances of Encoding classes (utf ascii and so on) removed from Server.cs. Now, its used class Encoding.

Sept 5, 2005
	lotsa lotsa files
	(tar)		made quite heavy changes to every AbstractDef and their surroundings :)
		the result: FieldValues of abstractdefs are saved and loaded!!
		And they are resolved from scripts using LScript. That is slow, very slow. But
		I did it so that they can be resolved on-demand, so that the startup doesnt take half an hour
		(yeah seriously. It needs some optimisation yet, and there's many errors, 
			need to resurrect the importer and make it reflect the changes)
		need some array syntax for LSCript :\
		

August 30, 2005
	Constants.cs, defs.scp
	(tar)		reimplemented Constants. They now fully use LScript, even for the random stuff...
		that means incompatibilty for {somedefname 1} etc. so had to fix some parts of defs.scp

August 19, 2005
	WorldSaver.cs, scripts/.../BackupsManager.cs
	(tar)		reimplemented world saving and backup managing

August 19, 2005
	Stealth.scp, Hiding.cs
	(tar)		implemented stealth as an example skill in LScript

August 15, 2005
	SkillDef.cs, Character.cs, Hiding.cs
	(tar)		implemented hiding as an example skill in C#, along with some skill utility methods...


August 10, 2005
	AbstractCharacter.cs, NetState.cs, PacketSender.cs, Lscript/..., scripts/.../Character.cs, ....
	(tar)		finished the basic support for skills. That includes:
		Packet 0x3a (actually 3 versions) - updating skills
		AbstractSkillDef class - the basic class for script implementations
		skilldef keys as names of character's "virtual properties" in lscript
		including netstate change 
		
		now everyone hurry and implement skills! ;)
		
		(side note: netstate looks horribly cpu intensive, needs revising I'd say)

August 8, 2005
	Commands.cs
	(tar)		thrown away all the parsing code in Commands, and made it simply use LScript.
		still todo is to have back the security checking (i.e. allowing commands according to plevel)
		This was actually just a quick change I made while writing something else (skills), 
		so also the "x" and "set" commands (i.e. commanding another object) is yet todo.

August 3, 2005
	D_Add.cs, Add.cs
	(suni)	Added a Add Menu.

August 3, 2005
	Server.cs(edit)
	(suni)	Fixed a bug, by Remote Console connection the Server was crashing.

August 2, 2005
	Add.cs
	(suni)	Replaced the defname with the item name ( example: .add i_bag tells now: "Where would you add Bag?" )

August 2, 2005
	Add.cs, Commands.cs, Commands.cs, Server.cs, GameConn.cs, AbstractCharacter.cs
	(suni)	Added a new Target it is now only 1 function.

Sept 5, 2005
	lotsa lotsa files
	(tar)		made quite heavy changes to every AbstractDef and their surroundings :)
		the result: FieldValues of abstractdefs are saved and loaded!!
		And they are resolved from scripts using LScript. That is slow, very slow. But
		I did it so that they can be resolved on-demand, so that the startup doesnt take half an hour
		(yeah seriously. It needs some optimisation yet, and there's many errors, 
		need to resurrect the importer and make it reflect the changes)
		need some array syntax for LSCript :\
		

August 30, 2005
	Constants.cs, defs.scp
	(tar)		reimplemented Constants. They now fully use LScript, even for the random stuff...
		that means incompatibilty for {somedefname 1} etc. so had to fix some parts of defs.scp

August 19, 2005
	WorldSaver.cs, scripts/.../BackupsManager.cs
	(tar)		reimplemented world saving and backup managing

August 19, 2005
	Stealth.scp, Hiding.cs
	(tar)		implemented stealth as an example skill in LScript

August 15, 2005
	SkillDef.cs, Character.cs, Hiding.cs
	(tar)		implemented hiding as an example skill in C#, along with some skill utility methods...


August 10, 2005
	AbstractCharacter.cs, NetState.cs, PacketSender.cs, Lscript/..., scripts/.../Character.cs, ....
	(tar)		finished the basic support for skills. That includes:
		Packet 0x3a (actually 3 versions) - updating skills
		AbstractSkillDef class - the basic class for script implementations
		skilldef keys as names of character's "virtual properties" in lscript
		including netstate change 
		
		now everyone hurry and implement skills! ;)
		
		(side note: netstate looks horribly cpu intensive, needs revising I'd say)

August 8, 2005
	Commands.cs
	(tar)		thrown away all the parsing code in Commands, and made it simply use LScript.
		still todo is to have back the security checking (i.e. allowing commands according to plevel)
		This was actually just a quick change I made while writing something else (skills), 
		so also the "x" and "set" commands (i.e. commanding another object) is yet todo.

August 3, 2005
	D_Add.cs, Add.cs
	(suni)	Added a Add Menu.

August 3, 2005
	Server.cs(edit)
	(suni)	Fixed a bug, by Remote Console connection the Server was crashing.

August 2, 2005
	Add.cs
	(suni)	Replaced the defname with the item name ( example: .add i_bag tells now: "Where would you add Bag?" )

August 2, 2005
	Add.cs, Commands.cs, Commands.cs, Server.cs, GameConn.cs, AbstractCharacter.cs
	(suni)	Added a new Target it is now only 1 function.

July 15, 2005
	InPackets.cs, PlayerCreation.scp
	(tar)		moved the creation of a new player character completely to scripts.
		And it works again .) including shirt and pants :)
		
	Scripts/.../Memory.cs, MemoryDef.cs
	(tar)		Implemented the basics of memory"items". Not tested yet
	
June 16, 2005
	ObjectSaver.cs
	(tar)		Finished the implementation of save/load using attributes.
		Not tested too much, being too tired ;)

June 7, 2005
	ObjectSaver.cs
	(tar)		Finished the main part of the ObjectSaver stuff, plus some example usages 
		(TriggerKeySaver, TimerKeySaver, ArrayListSaver)

June 7, 2005
	(tar)		Fixed some bugs in character creation and logouting.
	
	ObjectSaver.cs
	(tar)		Started to write a system for generic saving and loading of custom types from the save.
		This way, anyone can add a saveable type (to use by tags and such), by various ways, which are variably complex :)
		Can also add a SaveImplementor to have other's types saved, such like ArrayLists or Hashtables.
		So far, I wrote only the API with documentation ;)

	PropsFileLoader.cs -> PropsFileParser.cs
	(tar)		Also renamed PropsFileLoader to PropsFileParser. There is enough Loaders already :P 
		and this does not really load anything.

June 3, 2005
	GumpDef.cs, Thing.cs and subclasses, OutPackets
	(tar)		changed yet the way things are constructed, but this time just alittle bit :)
			fixed some bugs in lscript (memberresolver was quite blind, was resolving without seeing the arguments ;)
			added DialogClose method to AbstractCharacter and the corresponding packet.
			Why did never no one told me there was a closedialog packet??

June 1, 2005
	ClassTemplate.cs
	(tar)		fixed the classtemplate thingy. It was not behaving correctly about names of fields/properties on the 
		generated Thing subclass. I also found out that it was parsing the variable declarations wrong, it was not allowing
		multiword default values (like "new ArrayList"), and in fact it was declaring that the defaultvalue is
		not obligatory, while in fact it was (and it should really be...)

May 31, 2005
	CompiledScripts\*, Thing.cs, ThingDef(s).cs and subclasses, ClassTemplate.cs, scripts, etc.
	(tar)		Created a new core subnamespace CompiledScripts, moved there what was TypeInfo (is now CompilerInvoker
		and ClassManager), Script (is now CompiledScript, CompiledTriggerGroup and GroundTileType).
		On the way got rid of the need for TypeInfo instances. Thing (and subclasses) now have only 2 constructors:
		copying constructor and creating constructor with one argument which is ThingDef instance. When creating
		thing instances, no reflection is used anymore, we use only virtuality of thingdef's method Create. 
		Those methods (there are 2 Create methods, one to create at a point in world, other to create in a container)
		are now generated by ClassTemplate.
		Why? I didn't like the multiple Thing constructors which all did the same, plus I didn't like using TypeInfo
		when we had a -Def class for each Thing subclass anyway.
	
May 29, 2005
	Lscript\OpNode..RandomExpression.cs
	(tar)		Implemented RandomExpression, that is the various {1 2 3 4} thingies from spherescript. Unfortunately 
		it does not support all the possible syntax :\ even this one {c_man 1 c_woman 2} would cause a syntax 
		error or something, because it basically resolves as if it was {c_man(1, c_woman, 2)}, which is a nonsense.
		That is the downside of compatibility with 55i sphere's syntax of calling methods without (), etc.
	
	LScript\OpNode_For.cs
	(tar)		Implemented For. Syntax taken from 56 series (and extended a bit I think, as usual ;)
		For local.foo 1 100
			//local.foo now iterates from 1 to 100 inclusive
		endfor
		the bounds can be switched (like the left one is greater), then it goes down.
		
		
April 28, 2005
	LScript\MemberResolver.cs, ..
	(tar)		Added class MemberResolver (to resolve members :) this more or less eliminates the code duplication in
		OpNode_Lazy_Exception and OpNode_Lazy_AddTimer and any future classes that would need to dynamically resolve
		members in the "LScript style".
		(I did this some time ago but forgot to add this message :)
		
	added Common\TestSuite.cs and scripts\Tests\LScriptTest.cs
	(tar)		Started writing LScript tests...
	

Mar 31, 2005
	src/Logger.cs
	(iwan)	WriteDirectToConsole removed. Write() methods no longer add timestamp to
		strings. SetTitle() method added.

	src/ConsConn.cs
	(iwan)	Write() method added.

	WinConsole/SteamConsole.cs, WinConsoleForm.cs
	(iwan)	Write() methods added to IConsoleListener, SteamConsole and WinConsoleForm classes.

Feb 23, 2005
	(iwan)	Small changes in build system. Core compilation in console should (I hope)
		work fine. To identify SANE build use symbols OPTIMIZED && TRACE
		and for OPTIMIZED build OPTIMIZED && !TRACE. Identification in current
		code is checked and seems to be ok.

Feb 15, 2005
	scripts/defaults/WorldRegion.scp
	(iwan)	This is temporary file and should be removed later. SE throws exception, if no regions are
		defined.

	src/Globals.cs
	(iwan)	NDOC invocation cleaned up. 

Feb 11, 2005
	Common/UberEnumerator.cs
	(iwan)	Example documentation using doc attributes.

Feb 10, 2005
	src/TypeInfo.cs
	(iwan)	Script assemblies are stored in /bin (instead of scripts/output).

	(iwan)	NDoc is accepting script assemblies.
	(iwan)	Configuration 'fast startup' added to MSVC.NET solution. It differs
		from 'DEBUG' configuration only in FAST_STARTUP symbol.

Feb 9, 2005
	./src/Globals.cs
	(iwan)	NDoc invocation added to CompileDocs()

	(iwan)	NDoc project files added to ./distrib (note that script assemblies
		are not participating in documentation building). Docs are placed
		in ./docs/sourceDocs directory.
	(iwan)	New option ndocExe in steamengine.ini (section files).
	(iwan)	MSWIN symbol should be defined, if we are compiling SE under Windows
		(and LINUX symbol, if SE is compiled under Linux).

Feb 5, 2005
	(iwan)	Content of About the different builds.txt file was moved to README file.
		Changes.txt renamed to CHANGES.
	(iwan)	SteamDoc rework

Feb 3, 2005
	scripts/defaults/Test.cs, src/TypeInfo.cs
	(iwan)	Documentation attributes can be used in scripts
		(see scripts/defaults/Test.cs).
	

	WinConsole/WinConsoleForm.cs
	(iwan)	Two clipboard copy modes available (you can select them by changing
		value of SimpleCopy in gui.ini). First (SimpleCopy=true), after
		selecting text in displayBox and releasing mouse button, all
		selected text is copied into clipboard and unselected. In second
		mode (SimpleCopy=false), nothing happens after releasing left
		mouse button. You must copy selected text into clipboard manually.

	src/Main.cs
	(iwan)	If symbol FAST_STARTUP is defined, some parts of startup process
		are skiped (TileData, SoundMul initialization, Imports, Sphere
		script loading, generating of missing defs and resyncing,
		see Main.Init() method for details) and thus startup of
		server is significantly faster, of course some parts are not 
		working properly.

Feb 2, 2005
	(iwan)	build scripts for MONO under Windows
	(iwan)	docGenerator replaced with SteamDoc.

Sometime after nov 11:
	(SL)	Changed the 'this file is GPLed' header to a more proper GPL header.
	(SL)	Moved all the using foo; statements in all the files to before the
		namespace bar { statement.

Nov 11, 2004:
	Common/UberEnumerator.cs:
	(SL)	Updated the comments on GetUberEnumeratorElementForType, specifically
		about the 'ref object obj' parameter (I modified the comment to note
		a special behavior that was formerly not noted, since Planets' FastList
		class now takes advantage of that behavior (FastList would probably not be
		appropriate for SteamEngine, it is designed for speed above all else and
		carries a signifiant memory cost (more than a normal doubly-linked-list),
		but if anyone thinks it might be useful, I am willing to BSD-license it
		and copy it into Common. Actually, it might be useful for the lists
		of items and characters in sectors).

Nov 9, 2004:
	TileData.cs:
	(SL)	This no longer writes the unused itemid numbers file (in docs) if
		writeMulFileDocs is false.

Nov 8, 2004:
	Region.cs, Importer/ImportedRegion.cs
	(tar)		Implemented basics of regions. They have a certain hierarchy, 
		which is defined thru PARENT property in their scripts. 
		
	Thing.cs, AbstractCharacter.cs, Item.cs
	(tar)		Made some changes to the code around moving. Region should now be properly (un)set
		when walking / changing P. Plus the Region's entering/exiting methods are called,
		hierarchically (like, you are not entering region of a town when you just left
		region of a house in that town, because you already _were_ in the town 
		when you were in the house, etc.).

	AbstractCharacter.cs:
	(SL)	LogoutFully works when called on a PC at any time now, and can be used
		to forcefully log someone out completely (But if they're not in a safe
		zone, the logout timer would probably still be started, but when it triggers
		and calls LogoutFully again, it would do nothing).
		
	Globals.cs:
	(SL)	Added AOS to [features] for steamengine.ini.

	ItemDef.cs:
	(SL)	Renamed Cliloc & cliloc to ClilocName & clilocName. "cliloc" is an alias
		for it, for 99* compatibility.
		
	Item.cs:
	(SL)	Renamed Cliloc to ClilocName.
	(SL)	This now has an override of On_Click, to send a cliloc message
		if AOS is enabled and the item has a clilocName. AOS should require
		objprops, however, it might still send click-requests. We only do this if
		AOS is enabled right now because we don't know what client versions can handle
		cliloc ATM, but if AOS is enabled then odds are the clients are patched far
		enough to handle cliloc messages.
		
		This also doesn't use cliloc messages for stackable items at present -
		stackables are handled differently in the cliloc messages (there's a cliloc
		message for each stacked/notstacked state, rather than one name with %%s in
		it, plus there might be no way to append an amount to it. We can try
		appending an unexpected parameter, but I expect the client will just crash).
		
		There are a couple TODOs on that method.
	
	PacketSender.cs:
	(SL)	In PrepareClilocMessage, color 0 is changed to the default unicode message
		color now (The same as PrepareUnicodeMessage does, to work around a bizarre
		client bug or feature which makes unicode text in color 0 show only in
		the journal (written in black)).
	
	
Nov 6, 2004:
	Item, AbstractCharacter, Thing:
	(SL)	Changed IsDisconnected and IsConnected to IsNotInGame and IsInGame, and
		added IsLingering. Deleted IsOnline, IsOffline, IsLoggedIn, and
		IsLoggedOut.
	
	Various files:
	(SL)	Removed sanity checks which triggered if someone's conn was null,
		replaced them with a normal check because that can happen if they
		are lingering now.

Nov 3, 2004:
	ItemDef.cs:
	(SL)	TwoHanded moved to Equippable.ct.
	
	Item.cs:
	(SL)	TwoHanded made virtual.
	
	Equippable.ct:
	(SL)	The def has bool twoHanded now, and TwoHanded is on Equippable now.

	Importer/ImportedItemDef.cs:
	(SL)	The fishing pole is forced to be twohanded.
	(SL)	'twohanded' is written instead of 'twohands' now, since ClassTemplate defs
		don't have any way to alias vars to multiple names/keys (e.g. before 
		both 'twohanded' and 'twohands' were valid, now only 'twohanded' is. This
		should eventually get fixed).
		
	TODO:
	(SL)	Added an "Easy stuff for anyone to do" section at the top, with two
		entries in it currently.

Oct 31, 2004:
	Packets/InPackets.cs:
	(SL)	Renamed DecodeFixedLengthString to DecodeAsciiString, and added an optional
		bool truncateEndlines parameter to DecodeAsciiString and to DecodeUnicodeString,
		which defaults to true. (The 'profile' stuff will probably need to call it
		with truncateEndlines set to false, and books stuff too)
	(SL)	Added documentation comments to the DecodeAsciiString and DecodeUnicodeString
		methods.

	ConvertTools.cs:
	(SL)	Changed how RemoveIllegalChars works. It now changes \ts into spaces,
		but still truncates just before \r and/or \n.
		
	Thing.cs:
	(SL)	All the OverheadMessage methods which take a cliloc # instead of a string
		also take params string[] args now as well.
	(SL)	Added Message methods for sphere-compatibility (they call OverheadMessage).
	
	AbstractCharacter.cs:
	(SL)	All the SystemMessage methods which take a cliloc # instead of a string
		also take params string[] args now as well.
	(SL)	Added SysMessage methods for sphere-compatibility (they call SystemMessage).
	
Oct 30, 2004:
	docs/MUL File Docs/english cliloc entries.txt:
	(SL)	Added this file (The Cliloc program in mulediting/cliloc created it, though
		it had a different name).
	
	Commands.cs:
	(SL)	Commands should work with methods that take 'params foo[] bar' parameters now.
	
	ConvertTools.cs:
	(SL)	Tested and debugged converting strings holding hex numbers to enum values.
	(SL)	Made ConvertTo change a string which equals "null" to null.
	(SL)	SplitSphereString now ignores commas, spaces, and tabs inside ""s or {}s.

	Importer/*:
	(SL)	Moved Imports.cs here and split it into five files (Imports, ImportedDef,
		ImportedItemDef, ImportedCharDef, and ImportedTemplateDef).
	(SL)	FirstArgOnly now uses TagMath.SplitSphereString.

	Thing.cs:
	(SL)	New Yell, Emote, Whisper, Say, methods for cliloc messages (they take a uint
		instead of a string).

Oct 29, 2004:
	AbstractCharacter.cs, scripts/defaults/classtemplates/Character.ct:
	(SL)	Renamed src/Character.cs to AbstractCharacter.cs.
	(SL)	Added stat locks.
	
	PacketSender.cs, NetState.cs:
	(SL)	Resending stat locks, hitpoints, stamina, mana, extended stats, etc, on change.
		Statlocks aren't visible in the client, though. Hmm. Probably due to not having
		the AOS flags on.
	(SL)	PrepareClilocMessage method.
	
	Enums.cs:
	(SL)	Added a StatLock enum.

	Item.cs:
	(SL)	Fixed DecoratedName.
	
	Thing.cs:
	(SL)	OverheadMessage which takes a uint, for sending cliloc messages. The speech type
		may need to be changed. (More of these are to come later)
		To get a list of cliloc messages with their IDs, run the Cliloc program (multools/cliloc/).
	
	WorldLoader.cs:
	(SL)	Fixed the CRITICAL-when-saves-folder-does-not-exist bug.

	Packets/LowLevelOut.cs:
	(SL)	Added EncodeLittleEndianUnicodeString methods, which are currently used only
		by PrepareClilocMessage.

	Packets/MediumLevelOut.cs:
	(SL)	Disabled AddEntry *again*, apparently its speed problems still exist.
	
	ConvertTools.cs:
	(SL)	Tested and fixed conversion to enums from numbers.
	
	Enums.cs:
	(SL)	Added an entry for the SpeechType of 7:  OnlyOne=7,	//only one of these will be shown
		at a time. If you send another, the last one dissapears. It stays in the journal though.

	AbstractCharacter.cs:
	(SL)	SystemMessage methods for sending a system message to this character (to their conn).
	
	ConvertTools.cs:
	(SL)	Added string RemoveIllegalChars(string).
	
	InPackets.cs:
	(SL)	The string-decoding methods now call TagMath.RemoveIllegalChars.

Oct 28, 2004:
	ThingDef.cs, TemplateDef.cs:
	(SL)	Nothing uses ConvertLayers anymore, and it has been removed from GenericDefFromScripts
		(Since the code in FieldValue does it automatically when needed).
	
	ItemDef.cs, ThingDefs.cs:
	(SL)	DupeList is in & done, etc. It's automatically set up after all scripts are loaded, and
		also is modified automatically if dupeitem is changed on a def. You can do .xshow
		def.dupelist on an item in-game to see it.
		
	Main.cs:
	(SL)	"Starting Main Loop" moved to after Resync.
	
	Item.cs:
	(SL)	Flip() added.
	(SL)	Changing Model and Name now correctly triggers AboutToChange.
	
	Character.cs, CharDef.cs, Commands.cs, CompiledGumpDef.cs, Conn.cs, GameAccount.cs, GameConn.cs,
	Globals.cs, GumpDef.cs, Item.cs, LScript/IntrinsicMethods.cs, LScript/ScriptedGumpDef.cs,
	Map.cs, NetState.cs, Packets/Compression.cs, Packets/InPackets.cs, Packets/PacketSender.cs,
	Packets/Prepared.cs, Region.cs, Sector.cs, Server.cs, Skills.cs, TagHolder.cs, TemplateDef.cs,
	Temporary.cs, Thing.cs, ThingDef.cs, ThingDefs.cs, TypeInfo.cs, UberSectorEnumerator.cs:
	(SL)	Renamed Character to AbstractCharacter and made it abstract, in preparation of Character
		becoming a scripted class. The original plan was to have a BasicCharacter class in scripts,
		but it would be more confusing that way (with [BasicCharacter c_foobar] scripts, etc).
	(SL)	Copied Hex and Dec from Globals to Character so they work from in-game.
	
	WinConsole/FileViewForm.cs:
	(SL)	Files were not being closed properly. Fixed.
	
	Various scripts, scripts/defaults/classtemplates/Character.ct:
	(SL)	Character class with various Get* and Set* methods from AbstractCharacter implemented.
	
	TagMath.cs:
	(SL)	Made an AutoLoad method and supporting methods, which load without requiring hand-coded
		DelayedMethod methods.
	
	ClassTemplate.cs:
	(SL)	Adds save/load methods for class vars as well (not def vars).
	
Oct 27, 2004:
	Item.cs:
	(SL)	Contents of containers shall now be duped when that container is duped.

Oct 26, 2004:
	TemplateDef.cs:
	(SL)	Added InitialSetItem and InitialSetAmount for setting both current and default, used from
		the TemplateItem constructors.

Oct 24, 2004:
	GenericMulReader.cs
	(iwan)	bool GenericMulReader.Exists(string) added.
	
	tiledata.cs
	(iwan)	File names in linux are case sensitive, so we must determine (during loading of "tiledata.mul"),
		whether "tiledata.mul" or "Tiledata.mul" exists.
		
	distrib/mono-linux/makefile
	(iwan)	Updated. It's possible to compile and start SE under mono (linux).
		Warning level was decreased to level 1 (try mono compiler with warning level 4 and enjoy its
		pedantic messages:). New targets added (sane, optimized and debug).
		

Oct 22, 2004:
	TestSuite.cs, TypeInfo.cs:
	(SL)	[RegisterWithRunTests] attribute for public static void () methods in ANY class: scripts, core,
		whereever. Anything public and static with this attribute will be called when the RunTests command
		is used. Anything not public or static will be silently disregarded. Anything which takes parameters
		will cause RunTests to die (I should make it complain instead).
	
	Compression.cs, MediumLevelOut.cs:
	(SL)	CompressionMethodTests and EncodingTests are marked with [RegisterWithRunTests].

	ClassTemplate.cs, Character.cs, Item.cs:
	(SL)	Made DupeImpl so CW doesn't have to be used for duping.
	
	Imports.cs:
	(SL)	Imports itemnewbie= lines too.

Oct 21, 2004:
	Item.cs, Character.cs, Thing.cs, TypeInfo.cs, etc:
	(SL)	Dupe(bool addInCont) and Item(Item copyFrom, bool addInCont) no longer exist. Instead we now
		have Item's Dupe() add to container by default, but also have Dupe(Thing putIn) for use by
		container and character duping.
	(SL)	Added 'TODO: Copy contents' to both of Item's Dupe methods, since they do not already do that.
		(Character does copy its layers, though).
	(SL)	Character's and Item's Dupe methods are sealed now, and use def.typeInfo.constructor.Invoke
		to call the appropriate constructor.
	(SL)	TypeInfo's checking has been adjusted to account for the above changes.
	
	scripts/defaults/classes/Container.cs, scripts/defaults/classes/Equippable.cs:
	(SL)	Commented these out entirely, they're replaced by ClassTemplate scripts now.
	
	scripts/defaults/classtemplates/Container.ct, scripts/defaults/classes/Equippable.ct:
	(SL)	These replaced the ones mentioned above. And the nifty auto-converting stuff helped make
		these a litte bit simpler too (Besides what CT itself helped).
	
	Packets/ InPackets.cs:
	(SL)	Added DecodeByte.
	
	Packets/PacketHandler.cs:
	(SL)	0xbf sub 0x24 is disregarded, though a debug message is printed for it. This packet is apparently
		sent every second or so by 4.0.5a clients, at least AOS 2D 4.0.5a (that's what I have). There's 
		one byte in it (other than the PID and subcmd and blocksize, which are 5 bytes themselves),
		and it is seemingly random. Well, no, not quite. If you look at what character it is, it's usually
		a symbol or letter. In fact, I daresay if you took a dozen of these packets, took that byte/character
		from each of them, and slapped them together, you'd have a nice secure password. Unless they're
		predictable. :O
		Who knows. I stand still and they still go, all random still. It's a silly waste of bandwidth as far
		as I'm concerned. Did I say that out loud? That's going to come back to bite me in the ass as soon as
		someone figures out what those packets are for.
	
	ConvertTools.cs:
	(SL)	Attempts to use ConvertSphereNumber for enums before asking Enum.Parse, since Enum.Parse doesn't
		work on "0x[0-9]+" or "0[0-9]+".
		
	type_by_profession.cs:
	(SL)	t_musical has an on_create which just throws a ScriptExeception which says it is obsolete and
		replaced by [Musical i_*].
	
	defs.scp:
	(SL)	Layers exist in here now. They have some better comments too (Also in layer_defs.cs, which may
		get deleted).
	
	TODO:
	(SL)	Updated stuff in my section, and also the 'Anyone' section.
	
	Imports.cs:
	(SL)	t_musical's success/failure sounds are imported now, and the def is made Musical and the type
		dropped.
		
	scripts/defaults/classtemplates/professionItems.ct:
	(SL)	Musical is done, for now (Until skills exist).

	ThingDefs.cs, TypeInfo.cs, etc:
	(SL)	Basically changed things so that the constructing stuff and all that should work correctly
		for scripted types and scripted def types, etc. In particular, the overrideIdenticallyNamedScripts
		check in ThingDefs.Load(PropsSection input) now checks  || (tddef!=null && tddef.typeInfo==typeInfo)
		And the copying constructors, etc.

Oct 20, 2004:
	Statistics.cs:
	(SL)	Uses case-insensitive comparisons now instead of doing ToLower, no longer uses String.Intern.
		That should make it a fair amount faster. Corrected a mistake in the way rates were being
		displayed for compression statistics.
		
	MediumLevelOut.cs:
	(SL)	AddEntry is used again now. The speed problems appear to be fixed now, but I'll need to test
		it more to be certain.

	TypeInfo.cs:
	(SL)	FindConstructor and FindContConstructor changed to check parameter types instead of names,
		FindDefConstructor added (for scripted subclasses of ThingDef, usually scripted via ClassTemplate).
		TypeInfo objects are now made for subclasses of ThingDef as well - This is used by ThingDefs when it
		is loading scripted defs (if it encounters a [FoobarDef x_foobar] in the scripts, it will ask TypeInfo
		for the FoobarDef class, and will use the ConstructorWrapper contained therein to instansiate it.
		Also, TypeInfo was changed back to being internal.
	
	ItemDef.cs, CharDef.cs, ThingDef.cs:
	(SL)	External subclasses now have the name of the type they represent as a parameter, instead of its
		TypeInfo.
		
	ThingDefs.cs:
	(SL)	This now detects and instansiates *Def classes for scripted Def classes (Such as are made with
		ClassTemplate).
		
	ClassTemplate.cs:
	(SL)	Re-enabled this and worked on it some more.
	(SL)	Class-templates compile now, but I had to do some hackish stuff to the copying and container
		constructors, since it's impossible for ClassTemplate itself to always be able to determine if
		something it's making is in the end descended from Item or Character (or Thing instead of either of
		those). I have a feeling that the copying constructors will lead to trouble later, though.
		
		A quick find-in-files reveals that only the copying constructors for Character and Item do
		Dupe(false), everything else does Dupe(true), (Dupe calls the copying constructor with addInCont)
		so it seems to me that perhaps we should create
		an internal add-in-cont copying constructor and make the copying constructors use that directly,
		and remove Dupe(bool addInCont), and make the default copying constructor for items always
		add in cont. This would ensure that scripts couldn't screw up something's contents
		by calling Dupe(false) or new Foobar(false). Hmm. ClassTemplate will have to overload Dupe...

	distrib/MSVS.NET
	(iwan)	Project files updated.

Oct 19, 2004:
	Compression.cs:
	(SL)	The compression tests now create a new character to use with the test, and remove it afterwards.
	
	NetState.cs:
	(SL)	If something is deleted during the same cycle in which it is created, NetState will no longer attempt
		to RFV it with the former's position.
		
	FastDLL.cs:
	(SL)	FastDLL should work again (runtests shows it working fine).

	fastdll/various files:
	(SL)	Removed some old methods and added new ones which combine different flags; 10no3 and 13no10 exist now,
		for speed-comparison later with 10 and 13. Also, 12, 13, and 14 use unrolled loops, for testing. 13 and 14
		use a maximum of 250 iterations, and 12 uses a max of 20 iterations. The way it works is that when calling
		it with X iterations needed (the number of iterations needed is equal to the number of bytes that need to
		be compressed), these actually jump over however many iterations they aren't doing (out of 250, or for #12,
		20), so that they don't have to repeatedly check for the end of the loop. This was really only an experiment,
		and we'll see how well or poorly it works later. BTW, if the # of iterations needed is more than the max
		allowed, it will not jump forward at all, but afterwards it will go back up and will repeat the procedure,
		however many times is needed.
		Note: RunTests now shows the compression methods as all working properly.

Oct 18, 2004:
	The batch files in distrib, TypeInfo.cs, SteamConsole.cs, WinConsoleForm.cs:
	(SL)	Changed all the compiling stuff to a debug/sane/optimized standard for naming, made all the SteamEngine
		EXEs have the prefix before SteamEngine (instead of having some after and some before). Also, double-checked
		when TRACE, DEBUG, and OPTIMIZED flags are being specified. Now Debug has DEBUG and TRACE, Sane has TRACE
		and OPTIMIZED, and Optimized has only OPTIMIZED.
	
	(SL)	I haven't touched the files in distrib/MSVS.NET or distrib/mono-linux.
	
	Sanity.cs, and everywhere else that 'SANE' or 'DEBUG || SANE' was being used:
	(SL)	Instead of doing DEBUG || SANE, we now just check TRACE. There is no SANE flag now (there wasn't before
		either, for that matter, but it was planned).
	
	distrib/clean.bat:
	(SL)	Fixed this so it works again (Apparently moving stuff into distrib broke it).

	src/Character.cs:
	(SL)	Fixed a bug in Equip(): src wasn't being set correctly, which caused a null reference exception
		when Equip was called if src wasn't already set (which happened at character creation for new players).
		Thanks to Alrik for reporting this bug.
	(SL)	Made Resync not try to resend empty containers. (Another bug found by Alrik)
	
	src/Item.cs:
	(SL)	Added a bool IsEmpty property.
	
	src/Packets/PacketSender.cs:
	(SL)	PrepareContainerContents checks IsEmpty instead of Count==0.
	
	Debug.bat:
	(SL)	If 'Debug.bat runtwice' is run then it should actually run Debug_GUI twice. (This is for TestCVS, so it
		can also test scripts compiling since the first run only creates steamengine.ini before shutting down)

Oct 17, 2004:
	Constant.cs:
	(SL)	Added a public string Correct() method to BraceTree, which returns a corrected (if necessary) string
		dump of the values in that BraceTree. That's used by Imports now.
	
	TemplateDef.cs:
	(SL)	Added two new static methods to the TemplateDef class, FindCharactersInItemLine and FindChanceAndAmountIn,
		which take some parameters and have several out parameters. These hold code which was needed by Imports
		for reading and correcting item/sell/buy= lines in template defs, but which is also used in TemplateDef
		or TemplateItem (That code was originally a part of other methods in TemplateDef.cs, but was moved to
		their own methods when Imports needed that code as well).
	
	ScriptLoader.cs:
	(SL)	Resync will no longer throw an exception if srcConn is null and there are no files to resync.
	
	Character.cs:
	(SL)	Changed the Console.WriteLine("Hasn't got container "+target.Cont+" open.") statement to
		use Logger.WriteDebug instead.
	
	SoundMul.cs:
	(SL)	Changed the "cannot find " mul/idx file message from Fatal to Warning, since those muls are only
		used to generate some docs (in "docs/MUL File Docs").
	
	CharDef.cs:
	(SL)	Removed a bunch of Console.WriteLine messages that had been left there accidentally (
		from debugging something that was doing StackOverflowException several weeks ago, I think).
	
	Imports.cs:
	(SL)	This now checks for incorrect {} expressions in item/sell/buy lines in templates, and corrects
		it for writing to the generated scripts. The way it does this, however, it also standardizes
		the spacing on all the {}s in item/sell/buy lines that it writes out. That spacing is not
		necessary (nor is including a model on defs like [Item 0x01], even though it does that too),
		it is just that the Importer pays no mind to it and thus does not preserve the spacing of those
		lines in the imported scripts.
	
	template_loot.def:
	(SL)	The bad {} expressions have been corrected (by the Importer).
	
	Packets/Compression.cs:
	(SL)	Slightly changed the two messages in Pack which should actually never be printed.

Oct 16, 2004:
	Globals.cs:
	(SL)	Replaced the INI option useAnimData with readBodyDefs.
	(SL)	Added public static string GetMulDocPathFor(string filename) for the various things which write out
		information gathered from muls.
	(SL)	LoginFlags defaults to 0 for now (So clicking will show names again, until we add the packets needed
		for AOS support, etc).
	(SL)	Removed the INI option readSoundData and generateScriptsFromMuls, and added writeMulDocsFiles.
		
	SoundMul.cs, TileData.cs:
	(SL)	SoundMul now writes the list of sounds to a text file in the mul docs folder, instead of to
		scripts/defaults/sounds.info. TileData uses GetMulDocPathFor instead of manually figuring out where to
		put the list of unused item dispids. (These only run if the appropriate steamengine.ini options are on)
	(SL)	TileData's SecondInit method renamed to GenerateMissingDefs.
	(SL)	Instead of writing to 'fromTileData.def', this writes to 'newItemDefsFromMuls.def'.
	
	DispidInfo.cs:
	(SL)	CharDispidInfo has been removed entirely.
	
	AnimData.cs:
	(SL)	Deleted all the old code in this file, renamed it to CharData and added new code to that.
	
	CharData.cs:
	(SL)	This looks in the client's Bodyconv.def file to find dispids for which there is no chardef,
		and it then writes chardefs for them to scripts/defaults/chardefs/newCharDefsFromMuls.def.
	
	ThingDef.cs:
	(SL)	Defs with a numerical defname which don't have a model= in the def, now have model set
		to the defname (converted to a ushort), if the defname is a valid number.
	
	Main.cs:
	(SL)	AnimData.Init has been moved so it runs after scripts have been loaded, since it only checks
		for missing chardefs now. SteamEngine now checks to see if it needs to resync anything when starting
		the main loop (By printing a message and then calling Globals.Resync). Thus, new defs generated
		by tiledata or animdata are loaded now without requiring the admin to manually resync. This would also
		automatically resync anything the admin had changed while SE was loading, too, if SE didn't actually
		make everything else slow to a halt while it is loading. :P
	
	App.config:
	(SL)	Fixed a bug with App.config - there was text in there which shouldn't have been there. Thanks to
		Shlee for pointing it out.

Oct 14, 2004:
	GameConn.cs, InPackets.cs:
	(SL)	Movement requests are handled in GameConn now, and it takes care of checking how often the client can
		move and delaying movement if need be, etc. (So speed-hacking is dealt with now)
		I have only tested this with normal movement with a normal client, so perhaps someone could test with
		speedhack - I would, but it would probably not work since I'd be running the speedhack on the same
		computer as the server, and it would speed both the client and server up.
	(SL)	Movement messages are now WriteInfo messages done when movement tracing is on (They were doing WriteLine,
		writing to the conn only).
	
	TileData.cs, DispidInfo.cs, Main.cs:
	(SL)	Tiledata stuff is no longer written as itemdefs to generated.def (when generateScriptsFromMuls is on).
		Instead, after the scripts have loaded, the tiledata reader looks through the dispids, finds the ones which
		itemdefs don't exist for, and if that dispid is valid, it appends either an itemdef to
		scripts/defaults/itemdefs/fromTileData.def, or writes the dispid# into
		docs/MUL File Docs/Free (unused) itemID numbers.txt. This is done even if generateScriptsFromMuls is off,
		currently (Because IIRC that would also dump a bunch of chardefs, or it would try to - or maybe not, I'll
		have to check).
		
		Note that fromTileData.def contains only itemdefs which do not already exist somewhere else in the scripts,
		and the tiledata code will never write an itemdef into it which already exists, and it will never erase anything
		that is already in fromTileData.def.
		
		A lot of the equippables that this writes out seem screwed up with the 2d AOS client. Maybe they were
		designed for the 3D client? Some look like old items when equipped (Dragon armor for instance looks
		like purple platemail, of all things...), some look like nothing at all (most of the monster weapons),
		etc. There's even a "smyth hammer" which turns you into a bright white glowy female when you equip it.
		
		Right now, nothing is labelled as twohanded because there doesn't seem to be anything in the dispid info
		which indicates whether or not something should be. That'll have to be done manually. Likewise, a lot of
		these look nice in the backpack but probably shouldn't be equippable at all (see above), and that'll
		have to be changed by hand as well. There is also a lot of art for various statics, and also some
		which should be dupeitems of existing defs, but which were apparently missed in the default sphere scripts.
		For example, there is another piece to the Yew Tree which goes on the far left, which isn't in the default
		sphere scripts. Stuff like that will have to be moved into script files and changed to dupeitems.
		(However, this does detect and write dupeitems normally when writing out stuff)
		
		This code will be very useful, however, each time a new UO expansion comes out. We won't have to look
		through the MUL files by hand or anything. Plus, occasionally InsideUO misses an item (I counted at least
		one real item dispid which this code found that wasn't shown in InsideUO (0x2255, "ghost missile")), and if we
		we using InsideUO we would still have to wait for it to be updated first.
	
	Commands.cs:
	(SL)	TryConvertArg now attempts to get the itemdef or chardef for an int or uint parameter, if the method wants
		an itemdef or chardef. Now the 'newitem' command (for instance) once again works with a numerical parameter
		- and remember, we still only have two newitem methods, one which takes an ItemDef, and one which takes a
		TemplateDef. :)
	
	../packet-logger/wsock32.cpp:
	(SL)	FINALLY figured out why it was crashing with certain client versions. That was one tough nut to crack
		(It only took me, what, 6 months?). Anyway, it was because the client was calling WSAStartup multiple times
		and WSACleanup too, which is just fine, except that when WSACleanup was called, the packet-logger thought
		the client was shutting down, and so it unloaded stuff. And then when the client tried to call some wsock
		functions after the packet-logger had unloaded everything, BOOM!

Oct 13, 2004:
	ClassTemplate.cs:
	(SL)	Worked on this some more.
	
	ItemDef.cs:
	(SL)	ItemDef is no longer sealed.
	
	ConvertTools.cs:
	(SL)	Added a Capitalize method which capitalizes the first letter of a string, and an Uncapitalize method
		which makes the first letter lowercase.

Oct 12, 2004:
	ClassTemplate.cs:
	(SL)	Basically worked on this.

Oct 11, 2004:
	Item.cs:
	(SL)	Item now has a 'TriggerGroup type' variable, for which triggers will be run after any normal
		triggerGroups on the item, unless they cancel the action (as per sphere).
		Actually they run static-triggergroups (on all Items) first, then standard triggerGroups on that
		particular item, and THEN type, if it is set.
	(SL)	A name of -1 now means 'read the name from the def', and is default, and is what it is changed
		to if someone tries setting the item's name to null or "". Plural/singular is supported now when
		getting the name from the def.
	
	Server.cs:
	(SL)	When attempting to connect to findmyip.com, SE is a little faster at realizing if it can't find it,
		and it prints a "Please wait while ..." message before trying.
	
	Globals.cs, Logger.cs, Main.cs:
	(SL)	ShowMessageAndExitExceptions are now written with WriteFatal, in addition to having their Show() method
		called. This is primarily so that MONO users will still see the messages, but it also shown to non-MONO
		users. Note: In Globals, Logger.Show is used instead of WriteFatal, since SMAEE is used for stuff like
		"steamengine.ini has been written" and such there.
	
	Imports.cs:
	(SL)	Type is now imported as the type variable instead of adding a triggerGroup.
	
	Constant.cs:
	(SL)	GetWhateverThisIs now finds TriggerGroups by name as well as the other stuff it can find
		(This should enable FieldValues to hold TGs).
		
	ItemDef.cs:
	(SL)	Now stores 'type' in a FieldValue, reads it from the defs, and sets it in newly created Items.
	(SL)	Now has plural/singular support, parses the name when the def is being loaded from scripts and
		stores separately plural and singular. They are fieldvalues, so they could be changed with the 
		not-yet-existant (<-- not a word?) override code.

Oct 10, 2004:
	FieldValue.cs:
	(SL)	It is now an error to try to set a FieldValue's current/default value to a string containing '{'.
	
	TemplateDef.cs:
	(SL)	'sell' and 'buy' are now treated as synonyms for 'item', since (ATM) vendor buy and sell lists are separate
		templates. This may change when support for NPCs selling and buying stuff is actually implemented.
	(SL)	Two previously debug messages have been made into info - trace messages.

	WinConsole/App.config:
	(SL)	"Template trace messages" added.

	Imports.cs:
	(SL)	The importer now changes {} lines in model to their first element, and prints a warning.
	
	ScriptHolder.cs:
	(SL)	There's now two RunAndCatch methods which try-catch ScriptException and SanityCheckException and print
		an error for them using a new virtual Error method if they are caught. Erorr is overriden by LScriptHolder so
		it can also include filename and line number in the error. The two Run methods are now protected so that
		the try/catch cannot be accidentally bypassed.
	
	Various files:
	(SL)	Anything which called ScriptHolder.Run now calls RunAndCatch instead. Run is now protected so it can
		only be called from RunAndCatch.
		
	Constant.cs:
	(SL)	In the middle of working on this..

Oct 9, 2004:
	Common/Sanity.cs:
	(SL)	IfTrueThrow can now take a LogStr instead of string, and so can IfTrueSay.
	
	Character.cs:
	(SL)	When a mount is deleted, the rider is unmounted immediately now.
	(SL)	When a rider is deleted, the mount is deleted also now.
	(SL)	Flag_Disconnected is set for mounts when they are mounted or dismounted.
	(SL)	Tracked a bug to InternalEquip, which was setting cont to the character instead of the ItemCollection
		which the item was placed in, so the item was not being removed from the collection when it was unequipped
		later, which was causing other strange symptoms.
	
	TemplateDef.cs:
	(SL)	Now supports item= being either a templatedef or itemdef (only itemdef was supported before).
	(SL)	If Item in TemplateItem resolves to null, then it is simply not created.
	(SL)	Debugged templates.
	
	Constant.cs:
	(SL)	Evaluate no longer returns defnames instead of defs.
	(SL)	Changed Constant's Value, Def, and Model properties to work on UnevaluatedValue, not value (this is what
		was causing the incorrect evaluation of random constants in LScript). Also made them not be virtual anymore,
		since subclasses only need to overload UnevaluatedValue.
	(SL)	Corrected a logic error in ValueOddsPair.
	(SL)	More testing and fixing bugs.
	
	UberSectorEnumerator.cs:
	(SL)	These actually make sure things are inside the specified rectangle before accepting them now.
	
	Several files:
	(SL)	Changed all the re-throws I found to embed the exception being re-thrown into a new exception,
		so the stack trace info isn't lost. Also changed the comment which said to catch and re-throw FatalException
		before catching Exception, to say instead to throw new FatalException("Some message here", fe);
	
	GameAccount.cs:
	(SL)	GameAccount's Get(string) method is now case-insensitive, so it doesn't matter how you capitalize
		your account-name when you're logging in now.
	
	GameConn.cs:
	(SL)	Added try/catch around one of the async method calls which was getting an object disposed exception
		when Krrios' client disconnected.
	
Oct 8, 2004:
	A lot of files:
	(SL)	Finished merging stuff, and then I've been testing a bunch of things to make sure they work right,
		and fixing them when they don't.
		Also removed the dropsound stuff and made an @playdropsound and put code in t_coin, t_gold, t_gem,
		and t_ingot to play the appropriate sounds. t_musical's successsound and failuresound are also
		removed for now (They'll get a new def type later, perhaps). A number of things which were still
		internal and a number of things which were still beginning with _ have been changed, the most obvious
		being _cont and cont, which are now cont and Cont. cont is private now, and there's a Cont
		property on Thing, to support IPoint6D, etc. The other two big changes are that both the Packet classes
		and OutPackets have been completely replaced by PacketSender, and that the old Map and Sector code
		is gone and replaced as well.
		
		Note that (almost) nothing directly sets cont anymore, it calls BeingDroppedFromContainer or BeingPutInContainer,
		and nothing directly changes P of something in a container either, it uses BeingMovedInsideContainer.		

Oct 7, 2004:
	Pretty much every file:
	(SL)	Much work on merging my version of the code with the code on cvs.

Oct 6, 2004:
	ConvertTools.cs:
	(SL)	Updated the comments on the Get* methods, ConvertSphereNumber, and added comments to GetBool.
	
	Constant.cs:
	(SL)	Improved ToValueOddsPairs, to better handle malformed {} entries. It now makes an attempt
		to correct the mistakes and report the changes it had to make. It's not too complex, it just tries to add
		an odds of 1 if what ought to have been odds couldn't be converted to a number, or if there was an overflow
		error, treats it as if it were 1. But this works for the two broken {}s in the default sphere scripts.
		It also displays a better warning message, and fewer warning messages, and the warning messages are
		customized based on what the problem was.		
		
		You get one warning per missing odds variable or overflow, and one at the end which says what the
		corrected {} expression is.
		
		Here's an example, without the color highlighting:
		14:52: WARNING: In { MEAGER_MONSTER_GOODIE_1 1 MEAGER_MONSTER_GOODIE_2 1 MEAGER_MONSTER_GOODIE_3
			MEAGER_MONSTER_GOODIE_4 1 }, element #5 (MEAGER_MONSTER_GOODIE_4) wasn't a valid number.
			Probably the odds were omitted for the previous entry. We will pretend there is a 1 before
			MEAGER_MONSTER_GOODIE_4.
		14:52: WARNING: Our corrected {} expression is { MEAGER_MONSTER_GOODIE_1 1 MEAGER_MONSTER_GOODIE_2
			1 MEAGER_MONSTER_GOODIE_3 1 MEAGER_MONSTER_GOODIE_4 1 }
		
	GameConn.cs:
	(SL)	Made Version a property, and made setting it also set the new majorVersion variable, and 
		the code to check and possibly kick UO3D clients is here too now.
	(SL)	There's a MajorVersion property now which will return the first part of the client's version
		("4.0.0L" would be 4, "2.0.3" would be 2, etc). This can be used to avoid sending certain packets
		to older clients.
		
	
Oct 5, 2004:
	InPackets.cs, GameConn.cs, Commands.cs, Server.cs, Character.cs, InPackets.cs, and a few more files too:
	(SL)	Added a cancel-target delegate and support for it, etc. Made all the failure-targetting results also call
		the cancel target delegate, if it exists, and made SE detect when the client cancels the targetting itself.
		Previously, you could type .xsomecommand and if you then cancelled the targetting cursor, the command would
		be run on UID 0 :O.
	(SL)	Noticed the old number-parsing code in AddNewCommand (which was causing things like '0455' to be
		read as '455'), and changed it to use ConvertSphereNumber instead. So it'll still try to convert things to numbers
		before it starts trying to match parameters, but it does a better job of it now. I retested the commands
		stuff again after making this change.
	(SL)	Made _mount be saved and loaded.
	(SL)	Character's 'gender' was overwriting flags when loading -- fixed.
	(SL)	Changed targetting to use sbyte z instead of byte z.
	(SL)	The Target() method which takes all the different kinds of targon delegates now enables targetting the ground
		if the targon_ground delegate is not null.
	(SL)	Moved the code which handles the response to a targetting packet into GameConn, named it HandleTarget.
		It just takes the raw parameters from the packet (which are still read in InPackets), but that's enough to
		make a .self command possible.
	
	Enums.cs, (new) Sounds.cs
	(SL)	Moved the SoundFX enum into its own new file (Sounds.cs), since it has gotten massively huge. And worked
		on it.

	Constant.cs, Main.cs:
	(SL)	Retesting of resync revealed that constants weren't being cleared by UnLoadAll. Now they are.

	scripts/defaults/Commands.cs:
	(SL)	Added a basic .info command.
	(SL)	Added a .dragontile command which prints out the ABABABAB thing for dragon's betweentrans scripts.
	(SL)	Added a .self command, which works like Sphere's, except that it doesn't leave the targetting
		cursor behind.
	
	(new) Packets/Prepared.cs:
	(SL)	Packets that're prepared once so they can be sent fast. (Using FreedPacketGroups)
		These're ones which have only a few possible values, so they can be prepared ahead of time and used repeatedly.
	
	PacketSender.cs:
	(SL)	Created Prepare* methods for some packets that formerly only had Send* methods, for use in Prepared.cs.
	
	docs/packets.txt:
	(SL)	Updated this to include a list of the methods that're in Prepared.cs.
	
	Various files:
	(SL)	Changed some method calls to use Packets.Prepared.Send* instead of the PacketSender methods they previously
		used.
		
	Map.cs:
	(SL)	Added GetMapTileType(ushort id) (There was already GetMapTileType(ushort x, ushort y)).

Oct 4, 2004:
	ItemDef.cs:
	(SL)	ItemDefs can now have SuccessSound and FailureSound, which are stored in the fieldvalues for dropstacksound
		and droppilesound, since t_musicals are not stackable (There's a sanity check in t_musical's on_dclick to
		complain if someone makes a stackable item t_musical).
	
	type_by_profession.cs:
	(SL)	t_musical plays the success or failure sound now on success or failure, but for now it doesn't check skills,
		it's just a 50-50 shot at success or failure.
		
	Constant.cs:
	(SL)	Cleaned up the error message for EvaluateToDef, so it says "Could not find a def named..." etc normally.
	
	Item.cs:
	(SL)	SuccessSound, FailureSound properties added, which return the value from the def.
	
	Imports.cs:
	(SL)	Imports SuccessSound and FailureSound (from tdata1 and tdata2 on t_musical in sphere scripts).
	
	Thing.cs:
	(SL)	Both Sound methods, and SendSrcSound, now do nothing if passed SoundFX.None (0xffff),
		which is the default value for all of the current sound FieldValues.
	(SL)	Sfx now takes a SoundFX param instead of a string, and is just another name for Sound.
		Before, it took a string in sphere-hex format and translated it, to support how Axis tries
		to play sounds, but the commands parser does that itself now.

	Enums.cs:
	(SL)	Added more sounds, etc.
	
	AnimData.cs:
	(SL)	Made this pull different information (from animdata.mul instead of anim.mul), and dump it to a .info
		file in the scripts folder (if enabled). This might have information on what anims different models have.
		Or it might not, heh. For now we have the anims-supported-flags from sphere scripts, but those don't exist
		for newer critters. It'd also be nice to be able to autogenerate chardefs for new critters.
	
	(new) SoundMul.cs:
	(SL)	Created this - it reads sound.mul and soundidx.mul, and dumps the "filename" of every sound, and their ID#s,
		to a .info file in the scripts folder, if the INI option 'readSoundData' is enabled.

Oct 3, 2004
	/LScript/*
	(tar)		Made a form of exception stacktrace for LScript.

	Imports.cs, FieldValue.cs, Container.cs, ThingDefs.cs, ItemDef.cs, Constant.cs, Commands.cs:
	(SL) 	Made {}s in FieldValues work (GetWhateverThisIs now calls TranslateRandomStatement if passed one).
	(SL)	Made the Importer keep all ImportedDef objects in memory so it can do several passes on them
		to fiddle with their fields, before it finally dumps them.
	(SL)	DupeItem is supported and works now. The way it works is that in ItemDef's Create methods,
		if the def has DupeItem set, it will create the item but pass its DupeItem def instead of itself.
		After creating the item, it sets the item's model to its own model (Which is the only field that
		does anything on dupeitems).
	(SL)	DupeList is allowed and written into the generated defs now, but it is ignored currently. (I'll do flip
		later, but I have to make the values for DupeList get parsed into an array)
	(SL)	More testing and debugging of Constant, FieldValue, and the commands translation stuff.
	(SL)	ItemDefs which are based on another itemdef (id=a defname) are correctly detected and imported now.
	(SL)	Old-style defs (51a style, [itemdef somelargenumberhere] with an id too) are either converted to the new
		style, or not imported at all, depending on whether they have a defname= variable or not.
	(SL)	MountItem is automatically determined by the Importer, and written into the mounts' scripts. This
		requires that the t_eq_horse itemdef scripts be in the import folder, since that's how it figures this
		out. MountChar is also written on the t_eq_horse itemdef scripts, and that's used by the t_eq_horse script now.
	(SL)	Tested and debugged the commands stuff some more. Also, you can do model=c_man now, etc.
	
	ConvertTools.cs:
	(SL)	ConvertTo can now convert stuff to enum types too, so you can type something like .PerformAnim(gethit).
		Most of the magic of this is done by Enum.Parse, though. Enum.Parse also supports enums with FlagsAttribute
		with ',' being a separator, but since ',' is used by the command-parser, ConvertTo will convert '|' to ','
		before calling Enum.Parse, so you can use | instead (Which makes more sense anyways).
		
	scripts/defaults/types/type_ship_parts.cs:
	(SL)	Made t_eq_horse's @equip trigger create a mount and mount the equipper on it, and then remove the item.
		Thus if scripts do newequip=i_mt_horse_tan (or any other t_eq_horse itemdef), it will make a real mount for
		them to ride. It doesn't leave behind a ship part either, since it gets deleted on @equip. But if somehow
		those parts get into the world as normal items, characters could dclick them to get a free horse.
		*whistles innocently*
		P.S. It sets the new mount's Owner, too.
	
	Equippable.cs:
	(SL)	Fixed a bug in Equippable: if a script cancelled equipping, the item wound up being left in limbo. Now it
		is bounced instead. Also made it possible for scripts on items to delete that item during @equip, and if
		they do but still return success, then it is treated as failure anyways.
	
	MemoryFile.cs:
	(SL)	Added public IsOpenForWriting, IsOpenForReading, and IsOpen properties (get only).

	Character.cs:
	(SL)	Added the following public bool get properties:
		HasTwoHandedWeaponEquipped, HasAHandFree, HasBothHandsFree, and HasNoHandsFree.
	(SL)	Finished writing the code for GetMonsterAnim, GetAnimalAnim, and GetHumanAnim, and tested them a little
		(via PerformAnim).
	(SL)	body is private and Body is a property now like Model. Same for OBody, though it doesn't trigger AboutToChange
		(But Body does now).

Oct 2, 2004:
	GameAccount.cs, Character.cs:
	(SL)	Added VisionRange, RequestedUpdateRange, and methods named
		IncreaseVisionRangeBy(int amount) and DecreaseVisionRangeBy(int amount), to allow scripts to adjust
		vision range. GameAccount takes care of making sure only valid values are sent, and used internally,
		so vision range is an int and it won't matter if it goes below 0 or above 18, the client will only
		get 0 or 18. If the client's requested update range is < vision range, UpdateRange is the client's
		requested update range. Otherwise, it's vision range.
		
		The effects are delightful. The client will normally only let the user decrease their UpdateRange to 5 tiles,
		no less, but if the server tells the client that it is lower, the client cooperates (after asking for
		it to be changed back, but it gets ignored in this case). :)
		This'll be great for reducing vision range at nighttime, and for blinding spells, and cursed items....
	(SL)	Commented out BestCanSee, and then removed updateRangeSquared, etc.

	Point.cs, NetState.cs, Static.cs:
	(SL)	Moved from IThingState to IPoint4D the declarations of the *InRange methods. Point4D already had them,
		but IPoint4D didn't. Except that ClientsWhoCanSeeThis() was put in IPoint6D & Point6D instead, since it
		uses TopObj. Copied the methods themselves from Point4D to Static too.
	(SL)	Tweaked NetState some more - CheckVisibility now takes two IPoint6Ds and two Directions, and
		the message functionality now takes a param object[] args, instead of making another copy of the entire
		state of the thing that the message is about, and for movement a new IPoint6D is sent along with .
	(SL)	Turning in WalkRunOrFly now sets Flag_Moving too, and sends a message.
	
	ConvertTools.cs:
	(SL)	Added public static object GetNumber(Type type, string input), which calls ConvertSphereNumber and then
		ConvertTo and returns the result.
	(SL)	Renamed TestIf to TestIfImpl and made it virtual and not-static, and made a protected TagMath constructor
		which set a protected instance variable to 'this'. Made a static TestIf method which calls instance.TestIfImpl.
		And then it happened that TestIf was trying to be used before TagMath was initialized. After much frustration
		at .NET, I went away for a couple hours, and came back and solved the problem in one line of code:
			if (instance==null) instance = new ConvertTools();	//until TagMath replaces it.
		Heh. Anything using ConvertTools.GetBool doesn't need the additional abilities TagMath gives it anyways...
		And they'll show up as soon as they're needed (or as soon as anything uses TagMath for anything, really)
		Yay.
	(SL)	Made ConvertTo use ConvertSphereNumber when trying to change strings to numbers. It also catches the exceptions
		CSN may throw, however, and rethrows them only as an InvalidOperationException (as is expected by other classes).
	(SL)	Updated the comments on the Get methods to reflect the fact that ConvertTo now uses ConvertSphereNumber
		to change strings to numbers. They still remain for ease-of-use purposes, though. I haven't touched the To*
		methods.
	
	
	TagMath.cs:
	(SL)	Removed the 'new object ConvertTo' method, since it was identical to the one in ConvertTools, except that
		it lacked the changes I had made (I was wondering why my fixes weren't working...).
	(SL)	Changed TestIf to TestIfImpl and made it non-static, and removed the checks for types that ConvertTools'
		TestIfImpl handles, and added a base.TestIfImpl call if it wasn't any of the types that TagMath's TestIfImpl
		checks. (And did some other stuff with ConvertTools too)
	
	Commands.cs:
	(SL)	Fixed TryConvertArg so that it works when passed a ParsedCommandList. And fiddled with it, and added
		Info messages for testing it.
	(SL)	Changed one line which did (String's) Split(" ".ToCharArray()) to do Split(' ') instead:
		Split has params char[] for its parameter(s).
	(SL)	Much testing. It works nicely, and I apparently even happened to solve the '"false" means true to the Commands
		interpreter' bug. :)
	
	PacketSender.cs, InPackets.cs:
	(SL)	Added MovementTracingOn and info messages for it.
	
	InPackets.cs:
	(SL)	Added MovementTracingOn and info messages for it.
	
	Constant.cs:
	(SL)	Added ConstantTracingOn and info messages for it.
	(SL)	Went over the jumble of code that I had written here earlier, simplified this and how it is used,
		and commented the Constant class with an explanation of what to use for what. I haven't commented the methods,
		but the comment on the Constant class itself should explain things well for now.
	
	FieldValue.cs:
	(SL)	Updated this to use Constant's .Model and .Def, etc, when appropriate.
	
	Exceptions.cs:
	(SL)	Added a public ScriptException(LogStr s,Exception e):base(s,e) {}
		constructor to ScriptException.
		
	Character.cs:
	(SL)	Made Character override Thing's Item Newitem(ItemDef arg, uint amount) method, to place the item in a
		container. I'd consider it a bug that it didn't, but the reason I found it is because I did
		".newitem i_leather_Gorget" and a gorget appeared on the ground instead of my pack, and after a short while
		I realized that the new code which ties Commands arg-converting into Constant was so uber that, because
		it noticed NewItem(ItemDef) before NewItem(string), it was taking the string and converting to an ItemDef
		successfully, and since Character didn't override NewItem, it was being made by Thing's version. So I
		found & fixed a bug and verified that my conversion code worked, both at the same time. :)
		
	WinConsole/App.config:
	(SL)	Added "Constant Trace Messages" and "Movement Trace Messages". Also added new and/or more and/or better comments on these and the others.
	
	Server.cs:
	(SL)	Re-enabled the send-update-range-on-login code.
	
	
Oct 1, 2004
	Added LScript/OpNode_Switch.cs
	(tar)		implemented Switch functionality into LScript. It works similarly as C# switch.
		You can use both integer and string switches (but not mixed), and can not have
		Control fall through from one case label to another.

	Constant.cs:
	(SL)	Made object Evaluate(object obj) return obj if it wasn't a constant or GenericDefFromScripts.
	
	Commands.cs:
	(SL)	Tested and fixed the code that I added the other day to make commands check constants for unknown
		stuff. (I tried it by typing color=colors_red. Handy! And then I used that to test some other stuff too,
		in NetState)
	
	NetState.cs:
	(SL)	Made NetState more efficient in terms of how much it sends and how much repeating of sent packets
		there is (should be virtually none now), also fixed some potential bugs and added some new stuff.
		An unfortunate consequence is that the size of CharNetState's SendUpdates method is larger, but
		I've heavily commented it.
		
	Character.cs:
	(SL)	Made Resend send a different packetgroup for each highlight color, preparing each only when it needs
		to (before sending it).
	(SL)	Made ResendPaperdollAndStatusBars obsolete, moved its functionality into NetState.
	(SL)	Made SendPaperdollTo call PreparePaperdoll with canEquip when appropriate.
	(SL)	Made FlagsToSend mask out 0x02 (our 'dead' flag) so it isn't ever returned, since 0x02 turned out
		to be the 'viewer can equip stuff on this character' flag for paperdoll packets, and apparently isn't
		used for anything else. It isn't sent to the conn of that character though, since that causes the paperdoll
		to think it's in war mode.
	(SL)	Made SendUpdateStats, SendUpdateHitpoints, SendUpdateMana, and SendUpdateStamina public for now
		(they were internal). Eventually they will be marked obsolete, but for now they are not, since NetState
		can't see or handle them yet.
	(SL)	Fixed a bug with Dupe() which was detected by a sanity check - If you tried to dupe a player, it would
		create a new character and then throw a NotSupportedException without actually setting anything on this
		new character. I've copied the throw statement into the very beginning of Character's Dupe method.
	
	scripts/defaults/types/type_animations.cs:
	(SL)	Changed this to use SendUpdateHitpoints instead of resending everything or whatever it was that it
		was doing before. Eventually it won't need to do anything to resend HP, since NetState will handle it.
	
	PacketSender.cs:
	(SL)	Changed PreparePaperdoll to take a bool canEquip parameter, and to include 0x02 in the flags if it
		is true.
	
	NetState.cs:
	(SL)	Made all the code which sends character information also send a different packetgroup for each highlight
		color, like what I did in Character.cs.

Sept 30, 2004:
	Exceptions.cs:
	(SL)	Added a (LogStr s) constructor to SanityCheckException :O.
	
	InPackets.cs:
	(SL)	Fixed a bug in the target-response packet handler (A target on the ground was also being treated
		as a normal target).

	Common\ConvertTools.cs:
	(SL)	Changed a line of code in ConvertTo: Before, it would call ToDouble on string input before trying
		to convert it to a specified number type. Now, it calls ConvertSphereNumber on string input before
		trying to convert it to a specified number type. This was changed for two reasons: (1) Because it was
		failing to convert "0x80000000" to a uint, and (2) so that users can type stuff in sphere-hex
		format and it will still work right.

Sept 29, 2004:
	Common\ConvertTools.cs:
	(SL)	Added object ConvertSphereNumber(string input) (yesterday?), and then added Get*(string input) methods
		like GetBool, which have the same purpose - to convert a string to something else, but to support
		as many possible formats as we can. These use ConvertSphereNumber for the initial parsing. Improved
		ConvertSphereNumber so it can try parsing as larger types if the ones it tries first are too small.
		
		Also added a string[] SplitSphereString(string) method, because string.Split didn't work the way I
		needed.
		
	Commands.cs:
	(SL)	If converting a parameter fails, we try calling Constant.GetValue(from) and (if it returns a result)
		attempting to convert the result (if it isn't already the requested type).

	Constant.cs:
	(SL)	Made ResolveValueFromScript put ""s around a constant's value if the value contained commas (if
		it wasn't already handled by the {} code). Since constants can only have one value (except for {}s, which
		you might consider one value (containing multiple values) anyways), LScript was failing when it tried to
		call Set after parsing what it had been given. Now, it doesn't, and sets the constant to a literal string.
		If something reads the constant, it can be expected to know what to do with the string. For example,
		Go(string) knows to split the string it is given (or to evaluate it and then split it if it is the
		name of a constant), and to act on what the string holds.
		
		This could possibly be improved. Added a TODO in Constant.cs (with the code which adds the quotes
		before passing the value to LScript):
					//TODO: Consider making commaized numbers be turned into an array and stored. Would that
					//require changes to LScript, or how does it recognize an array? Or does it?
					//We could bypass it if needed (like the {}-handling code does) and set the value directly.

	Thing.cs:
	(SL)	Added Go(string s), which will attempt to split the string and convert it using TagMath.Get* methods.
		If it's only one parameter long, it tries Constant.GetConstant once, and if it doesn't return anything
		usable, it gives up and gives an error.
		You can now define coordinates in defname/defnames/constants blocks in scripts, and they will be properly
		loaded.
	(SL)	Go(x, y) now calls Fix() after going to the specified coordinates.	

Sept 28, 2004:
	Constant.cs:
	(SL)	Finished work on this.
	
	Common\LogStr.cs:
	(SL)	Made the methods (Warning, etc) which take a single object parameter use the new ToStringFor method,
		which returns "null" if the object is null (instead of throwing a NullReferenceException, which is what happens
		if you try to .ToString() it.
		
	ThingDefs.cs, ThingDef.cs:
	(SL)	Created a new GenericDefFromScripts class between TagHolder and ThingDef now. It's what FindDef returns,
		and TemplateDef extends it.
		
	TemplateDef.cs:
	(SL)	New file. Represents a [TEMPLATE ] def.
		
	Constant.cs, FieldValue.cs, Thing.cs, LScript/OpNode_LazyExpression.cs:
	(SL)	Changed everything which used FindDef to recognize GenericDefFromScripts defs, and where appropriate,
		changed ThingDef refs to GenericDefFromScripts.
	
	FieldValue.cs:
	(SL)	Improved how FieldValue is designed and worked. Made it abstract, added three subclasses (NormalFieldValue,
		ModelFieldValue, and DefFieldValue). Designed to work with Constant and ThingDefs (w/ GenericDefFromScript, etc).
		
		Now FieldValues can be set to strings which hold the name of a constant defined by scripts. This includes
		random constants, the FieldValue's current value is really the Constant object, which will pick a random
		thing to return each time. I'd write more but I already wrote it in the documentation comments
		on FieldValue. (And it's quite long, so I shan't paste it here)
	
	
Sep 27, 2004
	Lscript/*
	(tar)		done invoking constructors with "params" parameter
	Added OpNode_Foreach.cs
	(tar)		Implemented foreach functionality for LScript.
		New keywords: "foreach", "in", "endforeach".
	
	MemberWrapper.cs
	(tar)		Fixed a bug that caused ignoring of "virtality" of methods and properties.
		If you made a wrapper for an (overriden) member of derived class, it was not 
		invokable on an object of base class.
	
	FieldValue.cs, TypeInfo.cs:
	(SL)	Renamed LoadFromDefs to LoadFromDefsAttribute, because that's how those should be named
		(according to Microsoft).
	
	Imports.cs:
	(SL)	Worked on the importer. Added a bunch of new features.
	(SL)	TwoHanded=Y or N is parsed now and written as TwoHanded=true or false for the outputted defs.
	(SL)	Supports Anim->AnimsAvailable, and adds our model-type flag.
	(SL)	Supports Sound. Adds sounds for coins (which were hardcoded in sphere.
		Ours are a little different from sphere's, though).
	(SL)	Getting ready to add two more sound values for t_musical items, SuccessSound and FailureSound.
	
	Enums.cs:
	(SL)	Notoriety enums, MapTileType, HumanAnim, AnimalAnim, MonsterAnim, and worked on the SoundFX enum some more.
	
	scripts/defaults/defs.scp:
	(SL)	Added a bunch of stuff.

	Script.cs:
	(SL)	Added bool IsMapTileInRange(ushort tileId, ushort aboveOrEqualTo, ushort below),
		and public virtual bool IsTypeOfMapTile(ushort mapTileId), which returns false by default.
		Also made this keep a hashtable of loaded Scripts, which is used by Map to get t_dirt after loading, etc.
	
	Various files in scripts/defaults/types:
	(SL)	IsTypeOfMapTile is overridden by t_dirt, t_water, t_lava, t_grass, and t_rock now, and will return
		true if it is passed the tileID of a map tile which matches its type. (This'll be needed for mining and such)
	
	Map.cs:
	(SL)	Added methods:
		MapTileType GetMapTileType(ushort x, ushort y)
		bool IsMapTileWater(ushort x, ushort y);
		bool IsMapTileDirt(ushort x, ushort y);
		bool IsMapTileLava(ushort x, ushort y);
		bool IsMapTileRock(ushort x, ushort y);
		bool IsMapTileGrass(ushort x, ushort y);
		
		Use GetMapTileType when you would have to call more than one of the other methods.
		
		Added documentation comments to IsWalkable, HasStaticType, and HasStaticId.
	
	ThingDefs.cs:
	(SL)	Sped up searching for the def which corresponds to a particular UID.
	
	ItemDef.cs:
	(SL)	Changed stackable/_stackable to Stackable/stackable, and did the same for flippable.
	(SL)	Added a TwoHanded property, and a FieldValue backing it.
	
	CharDef.cs:
	(SL)	Added AnimsAvailable and Sound.
	
	Item.cs:
	(SL)	Changed the Stackable property's call to the ItemDef's Stackable property to match the new
		capitalization of that.
	(SL)	Added a TwoHanded property which checks the def's TwoHanded property.
	
	ScriptLoader.cs:
	(SL)	Added a call to Map.LoadingFinished() to Load(), so Map is told so it can retrieve the Scripts for t_rock, etc.

	Character.cs:
	(SL)	Made Equip handle two-handed weapons.
	(SL)	Added: IsModelHuman, IsModelAnimal, IsModelMonster, public HumanAnim GetHumanAnim(GenericAnim anim), 
		public byte TranslateAnim(GenericAnim anim), and most importantly, 
		public PerformAnim methods which match the Anim methods, except these take a GenericAnim parameter for anim,
		and call TranslateAnim to translate it into the actual anim to send.
		
		PerformAnim will be used for swinging in combat, bowing, etc.
		HumanAnim GetHumanAnim(GenericAnim anim), and similar methods for monsters and characters, deal with returning
		the most appropriate anim which the character model supports. P.S. the 'anim' variable on sphere's chardefs
		is a brilliant feature, but the name is a bit wonky, so it's 'animsAvailable' here. Also, I didn't want to hardcode
		what dispids corresponded to humans, animals, monsters, etc, in case a shard dev added new characters but didn't
		add them inside the existing groups (monsters<animals<humans). They'd have to set the supported anims themselves,
		but we can include instructions for doing so, or something. It's pretty simple when you understand it.
		
		In our system, 0x80000000 specifies a human model, 0x40000000 animals, and 0x20000000 monsters. Humans,
		monsters, and animals have different anim #s for various actions, and lots of monsters and animals
		don't have all the anims, and the rest of animsAvailable is a set of flags which specifies it. Bit 0
		corresponds to anim #0 for that type (monster or animal), bit 1 corresponds to anim #1, etc.
		
		Monsters have 22 anims, animals have 12, so most of the high bits are unused. Humans have a boatload of anims,
		but all human bodies implement all the human anims, so the only flag used for humans is 0x80000000 (which
		marks them as being a human body)
		
		'Human models' includes the models for anything humans can equip that is visible on the character model itself.

		[I think I will be removing the 0x80000000 thing, etc, and just checking the model #s, and if I can figure out
		where and if the client keeps data on what anims each character has, then I will probably remove the anim#s too.]

	LogStr.cs:
	(SL)	Added a Code(string s) method which returns colored "[s]" (with the []s the Debug color and the string 
		in the Ident color). Just so it looked pretty. It can be changed later, or by someone else, if anyone wants -
		I just wanted a way to print code easily.
		
	Constants.cs:
	(SL)	Made this work with {}s - it can't just hand it to LScript to evaluate, it has to note the random choices
		and stuff, and there can be {}s inside other {}s, and references to defnames with {}s in other defnames' {}s,
		or references to defs, etc... Not finished (or tested) yet.

Sep 26, 2004
	Lscript/*
	(tar)		LScript can now "n\atively" invoke methods that have "params" parameter.
		ToDo is to be able to invoke "params" constructors, 
			and also to rewrite the "stringmethod" functionality. ugh.
		anyway, the main goal was to be able to write "this.dialog(d_something, foo, bar)"
		and have the foo and bar as argv(1) and 2 in the dialog layout section/inside scriptargs in Construct()
		This goal is reached :)

	Various files:
	(SL)	Made the Thing constructors call AboutToChange() (if not loading) before UID is set, and made UID
		default to -2, and made an IsBeingCreated property which returns true if UID is -2.
	(SL)	Made NetState work nicely with item/character creation and such, and made PrepareEffect in PacketSender,
		and various Effect methods on Character. IsBeingChanged is saved as part of the state of things, so
		it is checked when NetState processes changed stuff, and if it was set on the former, then the current
		one is resent only, and nothing else is done with that thing this cycle. (Also, if IsBeingChanged is true
		when the state objects are being constructed, they will not load anything else, because nothing else
		is defined at that point, and anyways, nothing else from the former is used by NetState if IsBeingChanged
		is true)
	(SL)	Changed some Console.WriteLine calls to Logger.WriteDebug.
	(SL)	Other fixes related to NetState, like making sure nothing calls Resend/Update/etc, since it isn't necessary
		anymore, etc.
	(SL)	Re-enabled async stuff in GameConn after noting that I was getting no crashes at all (yay),
		so I can see if the crashes come back. If they don't, async wasn't doing anything wrong.
	(SL)	Implemented support for Flag_CannotMove and Flag_CannotTalk.
	(SL)	Mounting and dismounting is finished, and you can dclick yourself to dismount like on sphere, and if you
		ask for the paperdoll directly (with the open paperdoll macro or the paperdoll button in 4.0.0ish clients)
		you'll get it and won't be dismounted (Also like in sphere and every other XSS, probably).
		But unlike sphere, at present, if you can't mount a mountable NPC (if you don't own it or aren't a GM,
		for instance), you won't be told you can't mount it, instead you'll open its paperdoll when you dclick it,
		which is what happens when you dclick anything which you can't mount, basically (except yourself when you're
		mounted).
	(SL)	item.Resend() and character.Resend() are used by NetState now, but not by anything else at present.
		They're still public so as to not break sphere scripts which used them, though.
	(SL)	Corrected a bug in the importer - it was outputting itemdefs which had a layer=0 as Equippables, but
		layer=0 really means "Not equippable" in Sphere. This means the scripts will need to be regenerated.
	(SL)	Now that I can actually log in and stuff, I tested my fixes to weight, and corrected one bug in it.
		It seems to work now, but hasn't been tested thoroughly. But in the meantime, I've added checks to NetState
		to make it verify that it is always correct (in the debug build).
	(SL)	Added "Weight Trace Messages" to the GUI config file, and WeightTracingOn to Thing.
	(SL)	Split FixWeight(adjustAmount) into DecreaseWeightBy(amount) and IncreaseWeightBy(amount).
	(SL)	Tested and debugged HasStaticId and HasStaticType, so they work now. Also made a number of static-related
		methods which calculate relative x/y faster.
	(SL)	Deleted OutPackets.cs.
	(SL)	Packet and PacketBuffer wouldn't compile anymore after I deleted OutPackets, and they were deprecated
		anyhow, and slower and less efficient than PacketSender, and I had yet to need packets which can be recompressed
		(which is the only advantage they had over PacketGroups or FreedPacketGroups), so I have deleted them.
		
		I also had to remove the following methods from SimulConn and GameConn:
		Send(Packet packet), Send2(Packet packet), RepackAndSend(Packet packet), and RepackAndSend2(Packet packet).
		
		(I tried deleting SimulConn entirely first, but I had forgotten that the Compression tests used it)
	
Common/Sanity.cs:
	(SL)	Added StackTraceIf(bool condition).
  		
	
Sept 25, 2004:
	NetState.cs, FastDLL.cs, Packets/MediumLevelOut.cs, TestSuite.cs, Character.cs, and possibly others:
	(SL)	Figured out the cause of the random crashes and solved them (yay). Turned out I had the dual definitions of a
		constant (the constant is different with USEFASTDLL defined than without it) swapped, so the CompressAs
		method was picking compress-method-numbers for which it knew no methods, and was simply not compressing the
		packets. But after I fixed that, and then compiled and tested FastDLL, that didn't want to work either, and so
		I added a warning which will get thrown if SE tries to compile with USEFASTDLL (which won't happen unless
		you have compiled FastDLL). It tells you how to kill FastDLL, by the way, since it doesn't work at present.
	(SL)	Various other changes which I've forgotten.
	(SL)	Spent several hours thoroughly testing and documenting the anim packet (Jerrith's has almost everything
		about it wrong, and Kair's documentation on that packet is like a corrupted copy of Jerrith's, lol - although
		some of the packets on *my* guide look like corrupted copies of Jerrith's, but methinks Celeron is to blame for
		those! Someone remind me to LART him when I go online next).
		
		Also timed it to figure out how frameDelay affected how long it took to draw an anim (at least here), and
		documented that, and made a method on Character named AnimDuration(numFrames, frameDelay) to return an
		estimated number of seconds (as a float) that UO would take to finish showing an anim. I'm assuming that the
		time will be the same on almost all machines, except for slower ones (about which there's nothing we can do).
		
		I changed the Anim methods a bit, so anything which used them may be broken now (but it wouldn't have worked
		terribly well before anyways, unless doing a very basic anim(animNumber) with no other parameters, and THAT
		one is still the same).
		You can try AnimDuration out in-game: Type .show animduration(7,50), for instance. You can try Anim out
		in-game too, of course.
		
	(SL)	Made the TestSuite stuff call PacketSender.DiscardAll if a test failed. :O
	(SL)	Disabled the AddEntry method for compression method statistics, because it runs reeeallly slow for some
		reason that I haven't gotten around to figuring out yet.
	
	(SL)	I rearranged stuff in Server.StartGame, but it works
		more nicely now (You shouldn't see everything in the world appear a moment after you do, for instance, everything
		should appear at once now). There still isn't any duplication of sent packets, mind you, and there shouldn't
		need to be, though if you look at a packet-log of what RunUO (1.0 RC0) sends, it sends a bunch of packets twice,
		and even sends one packet three times! What a waste of bandwidth... But they probably had a reason, and I just
		don't know what it is. But maybe they had the send order screwed up - I forget.
		
	(SL)	NetState works, and works nicely now, woooo! By the way, there are now NetState.Disable() and NetState.Enable()
		methods, which are used by InPackets' CreateCharacter method, when it creates the character's equipment, hair,
		etc. Disabling it suppresses AboutToChange() method calls, preventing the item from being registered as changed
		if any changes happen while NetState is disabled. Also, if it is disabled when NetState.ProcessAll() is called,
		then a sanity check will get thrown with some information about some ways you can find the code which forgot
		to re-enable it. You don't have to worry if NetState is already disabled when calling those, it keeps track
		of how many times Disable has been called and such itself.
		P.S. The reason for disabling it temporarily is to prevent the items from being sent more than once, since they
		will be sent in the character info packet. There's a more elegant solution, but I haven't thought
		of it yet. But it lurks just outside my reach... I'm tired.

Sep 23, 2004
	WinConsole/
	(iwan)	ConsoleLinks.cs file added. Console links related code moved to ConsoleLinks class.

	TypeInfo.cs, Globals.cs
		Config file option 'strictCompiling' (section [scripts]) is working properly.
		Warning level is determined by Globals.warningLevel and is loaded from configuration file
		(option 'warningLevel' in section [scripts]).

	SteamConsole.cs, TypeInfo.cs
	(iwan)	If error message doesn't apply to any file, no file&line info is displayed.

	Logger.cs, Main.cs
	(iwan)	Logger initialization changed a little bit. Static constructor of Logger class tried to get
		value of Globals.logToFiles. This used to lead to invocation of static constructor of Globals
		class, where steamengine.ini file is loaded and all errors, which are contained in
		configuration file, are printed only to text window, because neither native console 
		connection nor log file are prepared at this time. Note that text window is opened only
		by debug builds of WinConsole. So if end-user uses WinConsole, he/she cannot figure out
		his/her mistakes. Opening of logfile is moved from Logger's constructor to separate
		static method Logger.Init(), which is called from MainClass.SteamMain() after 
		establishing native connection. Log file is not (and cannot be) opened during loading
		of config file.

Sep 22, 2004
	(iwan)	Cosmetic changes. I made right my misbehaviour against Coding style standard and 
		console's executable files are moved to bin/ directory. Server (and console) leaves
		bin/ directory if it's started from bin/. (leaves = changes it's default directory -tar)

	ConnectionForm.cs, FileViewForm.cs
	(iwan)	Copyright notice added.

	Common.cs
	(iwan)	Added 'Tools' class. There can be gathered all single functions usefull for both, console
		and server. 

Sep 21, 2004
	src/LScript/...
	(tar)		Finished the LScript part of the gumps. That means that you dont need the "argo." to write
		dialog methods in dialog section, and the TEXT section works.

Sep 20, 2004
	Added files: src/GumpBuilder.cs, src/GumpDef.cs, src/CompiledGumpDef.cs, src/LScript/ScriptedGumpDef
	scripts/.../d_test.cs, scripts/.../d_test2.scp
	modified: ScriptLoader.cs, LScript/*, Packets/*, etc.
	(tar)		Implemented Gumps, for use in both compiled scripts and LScript.
		Basically, instances of the GumpDef class are "factories" that produce GumpInstance instances - 
		these are stored on the GameConn instances of the players who see the gump.
		(i.e. it is not as in for example RunUO, where the layout is made in constructor of the 
		Gump subclass instance. But the interface for layout in C# does also contain methods with same signatures
		as in RunUO, in case someone wanted to convert RunUO dialogs from some automated tool like gump studio or so.)
		In case of LScript, there is yet some work to be done, mainly better backward compatibility 
		(now it supports basically just the 99z+ way of making the dialogs; the TEXT section does not yet work,
		the layout is created by methods of ARGO - which is actually the GumpInstance, etc.), and passing 
		arguments to dialogs. But it works :)
		Whoever is interested, look at the d_test.cs and d_test2.scp files, where you can find examples 
		of practically identical gumps, once as C# and once as LScript code.
		And someone could also already make some actually *useful* gumps :)

	src/ScriptFilesCollection.cs
	(tar)		Fixed reading of unusual characters in scripts - changed encoding from utf8 to Encoding.Default
		(systems default ANSI encoding, according to the .NET documentation)

Sep 20, 2004
	(iwan)	Initial port of Steamengine to Mono (under linux). New directory (mono-linux) added
		to distrib/. It contains makefile and some simple shell scripts. Use symbol 'MONO' to
		isolate Mono-related code (this is change, we used 'Mono' symbol instead). Current
		source code was compiled and tested under Mono 1.01 installed on Fedora Core 2
		(using kernel 2.6.5-1.358).
		It's impossible to run WinConsole, however it can be compiled under special circumstances.
		Server is running properly and you can use remote console to connect (from other mahine
		of course). Connection from UO client isn't tested.
		There are still many non-critical bugs, feel free to fix them:).

	src/TypeInfo.cs
	(iwan)	Errors messages produced during script compilation are using LogStr class now.

	WinConsole/SteamConsole.cs
	(iwan)	Fixed dummy error in SteamConsole.EnqueueMessage (LogStr).
	(iwan)	SteamConsole.DispatchMessage() works correctly with LogStr objects.

Sep 19, 2004:
	WinConsole/SteamConsole.cs
	(iwan)	Compilers error or warning messages are using LogStr class, so you can click on
		error (or warning) in windows console and file, which contains the error, will be
		opened in your favorite editor (or in internal file viewer). Warnings are
		treated as errors.

	WinConsole/
	(iwan)	Added WriteLine(object), WriteLine(LogStr) to IConsoleListener and implemented in 
		WinConsoleForm.
	(iwan)	Link bug fixed.
	(iwan)	Files activated from console links are searched recursively in subdirectories.
	
	NetState.cs:
	(SL)	Turned the debug messages here into info messages.
	
	PacketGroup.cs:
	(SL)	Made public PacketGroup() check to see if a group is already open, and if so, it locks it before proceeding.

Sept 18, 2004:
	Console/WinForm.cs:
	(SL)	Made URLs work, by handling the LinkClicked event on the display box, then checking the registry
		to find out what the default browser is, and what to run to run it, then running it with the URL of the link.
	
	GameConn.cs:
	(SL)	Added a GetRandAsync which determines whether to use sync or async, and then set it to always
		return false, to disable asynchronous send/recieve - in order to test to see if the client crashes
		go away, and if so, then they were caused by it in some way, and effort can be made to determine the cause
		and correct it if possible.
		
	Character.cs:
	(SL)	Noticed that NPCs weren't being given brains (a sanity check on IsNPC pointed it out), so I've now added
		a line to the standard constructor which does this: this._brain=myDef.Brain;
	(SL)	Removed Flag_Running and made Flag_Moving be 0x80 (on direction. It was 0x40 before).
	(SL)	Added a check to loading to make sure that Flag_Moving wasn't saved (it shouldn't happen, but that is,
		after all, the purpose of sanity checks) - basically just by checking if Flag_Moving is true, just after
		direction is loaded. If so, then it must have been saved, or someone edited the save file. Note that this check
		clears Flag_Moving if it is set, and does IfTrueSay, instead of IfTrueThrow, so it does not interrupt SE.
	
	Main.cs:
	(SL)	Added a line in Cycle() to call NetState.Process, after Timers cycle, but before saving would be done.
	
	WinConsole/App.config:
	(SL)	Added the new GUI config option which makes packets be written to the log file when they are compressed
		(just prior to compression, their uncompressed bytes are written).
	
	LowLevelOut.cs, MediumLevelOut.cs, PacketStats.cs:
	(SL)	Fixed the packet-size stats stuff so it can handle any packet size up to the size limit of the
		packet-data-buffers.
	(SL)	Made another GUI config option which, when turned on, makes all packets which are compressed be dumped
		to the log file (the uncompressed bytes of the packet are dumped, just prior to compressing it).
	(SL)	Re-enabled the random selection of compression methods to use in MediumLevelOut, since I have had no
		client crashes or odd glitches (such as being shown 0,0 on login, with no player character there at all - though
		that was in an old version of Krrios' Client) since I disabled the async code in GameConn - Although it has been
		only an hour, I was getting crashes or glitches every 2 minutes or so before, so I'm thinking it's likely
		that the async code was to blame somehow - but I'll wait longer before trying to debug it, just in case.
		In any event, now that the client isn't crashing left and right, I can debug, test, and finish NetState. :)

	NetState.cs:
	(SL)	Continuing work on NetState, of course. Here's one change: ThingState now keeps FlaggedUid in addition to
		uid, and former's FlaggedUid is used when sending an RFV if the thing was deleted (since deletion sets the UID
		to -1 to mark the thing deleted).

Sept 17, 2004:
	Server.cs:
	(SL)	Moved Speech to Thing. Removed SendEmote, SendSpeech, etc, making the Emote, Say, Whisper,
		etc methods in Thing call the new Speech method in Thing. Moved SendNearbyStuff to Character.
	
	Thing.cs, Character.cs, Item.cs, NetState.cs:
	(SL)	Much work on NetState.
	(SL)	Moved() has been staked through the heart.
	(SL)	CheckVisibility is no longer on Thing or Character, being now merely the part of NetState which
		handles the updates for walking/running/flying characters, etc. It also uses packet groups now, and no longer
		needs stacks and horribly icky code to work around limitations in OutPackets, since it now uses
		PacketSender instead. So it is, overall, much nicer now.
	(SL)	Removed lots of calls to Update, UpdateX, ShowToAll/Resend/Appear, Disappear/RemoveFromView,
		added lots of calls to AboutToChange(). Removed ShowToAll, Appear, and Disappear entirely. RemoveFromView
		remains because it is needed for UpdateX, which is a sphere command. Both Update and UpdateX still exist
		so they can be used as commands, but they are no longer called by anything.
	(SL)	The NetState stuff for Character should be nearly complete (for now). At present, a lot of things
		trigger AboutToChange if they're changed, even though NetState does nothing when those things are changed.
		The reason is that later on, AOS objprops will probably need resending when those things change.
		What I need to do next is finish eliminating OutPackets (There are 12 obsolete messages originating in OutPackets,
		I need to take every method there which calls something, marked obsolete, and see what calls that method,
		and either move or eliminate said method as needed), and then I need to do the ItemNetState SendUpdates code.
	
Sept 16, 2004:
	OutPackets.cs, FastDLL.cs:
	(SL)	Changed FastDLL over to using the PacketSender buffers instead of OutPackets ones, and disabled the code in
		OutPackets which used FastDLL compression methods (so that OutPackets will continue to function while I transition
		the remaining OutPackets calls to PacketSender and then transition the meta-methods in OutPackets to other
		classes). [I probably broke FastDLL somehow when I did this, because apparently I killed the crash-while-logging-in
		error but made a new one, which I eventually tracked down and fixed, and discovered that FastDLL's compression
		methods weren't working right anymore]
	
	GameConn.cs:
	(SL)	Added public get bool properties IsOSI3DClient, IsIris, and IsPlayUO properties, and an internal bool
		for each (internal so that the various packet-handling methods and such can set them if they detect what
		client it is). Currently nothing detects Iris or PlayUO, but I've added TODO notes for both in GameConn, and
		plan to add support for PlayUO sooner or later (I have an old copy of KUOC which works, so I'll be looking at
		what it sends, but I plan to get a more recent copy the next time I'm online, if RunUO has it up for download
		at that time). One thing of note is that the version I have seems to be sending ping packets every few seconds,
		but I'm willing to bet that is happening because SE isn't responding to them (Did it used to? At the very least,
		we can detect PlayUO/KUOC and send ping packets only to it, if that makes it stop spamming them constantly :P).
		
		I don't have a copy of Iris here which works with AOS, and don't particularly want to try to get LBR and AOS
		to co-exist. (Nor do I want to hunt around to try to figure out where I misplaced LBR)
	
	Map.cs:
	(SL)	Added GetSeason(IPoint3D) and GetCursor(IPoint3D) for mapplanes, which currently return hardcoded
		values. I put a couple TODOs in there too (in the comments for GetSeason). The TODOs include possibly making
		it not hardcoded in the future, though the present hardcoded way means there's more than enough of whatever,
		but people wouldn't be able to use whatever mapplane # they wanted because they'd have to pick one which
		had the season and cursor they wanted - plus, regions and weather scripts and such need to be able to override
		seasons somehow.
	
	Character.cs:
	(SL)	Added Season and Cursor properties which call GetMap().Get*(this).
	
	PacketSender.cs, Thing.cs, PacketStats.cs, MediumLevelOut.cs, and the new file Packets/Compression.cs:
	(SL)	Attempting to track down the crash-sometimes-while-logging-in issue. I've got a theory.
	(SL)	Added more compression methods for the statistics code to use.
	(SL)	Moved the compression method tests code into Compression.cs, which also now contains all the compression
		methods which are used by CompressAs (in MediumLevelOut), except for the FastDLL ones.
	
	Many files:
	(SL)	Changing calls to Server._out.* to use PacketSender instead, and moving various methods in OutPackets
		into the appropriate classes (such as moving ResendPaperdollAndStatusBars into Character, etc).
	
Sept 15, 2004:
	PacketSender.cs, OutPackets.cs:
	(SL)	I've finished porting all the methods which prepare packets, and I've now marked all the ported methods
		in OutPackets obsolete, with the obsolete message pointing to the replacement method(s) in PacketSender. Now I
		just need to change all the code which calls them, and move/port the meta-methods in OutPackets (which only call
		other functions without doing any packet-making themselves) into the appropriate classes (like Thing,
		Character, etc). Then I can finish NetState too, and then I can get back to adding support for more packets. :)
	
	Globals.cs:
	(SL)	Did the TODO which said "Get z from map" or something like that, in the code which loaded the startpos
		(For when the startpos is only specified as x,y, rather than x,y,z or x,y,z,m), since I happened to notice
		it (and it was trivially easy now, though it wasn't when that TODO was written).
	(SL)	Added a TODO for features flags. (I'll probably implement them after I have finished with getting
		stuff using PacketSender)
	(SL)	Noted the differing case of 'plevel'/'pLevel' in the INI settings and the variables attached to them, and
		standardized it on 'plevel' (which is the case used in Account), so that everything matches. Another reason:
		I've never actually heard anyone say "p* level", with "p*" being whatever word the 'p' is supposed to stand for
		(privilege? power? player?), and I can't think of it as an acronym since you don't make acronyms with some 
		abbreviated words and some unabbreviated words (Or you'd have nations called "the USAmerica" and "the EUnion" and
		so on), so it makes more sense to me to treat 'plevel' as a word in and of itself, and to capitalize it as such.
		
		I may change the capitalization of Account's plevel and maxPlevel again soon anyways, to change _plevel->plevel
		and plevel->Plevel and such. But personally, I think both "Plevel" and "PLevel" look
		ugly and am loath to make that change, even if it meant that _plevel would be eliminated... Of course, I could
		just change _plevel to m_plevel, which doesn't look QUITE as ugly, but that wouldn't be consistant with the rest
		of the code.
		
	Server.cs:
	(SL)	Standarized the case of GetMaxPLevel and GetPLevel to GetMaxPlevel and GetPlevel.
	
	Character.cs:
	(SL)	Added a 'bool IsPlevelAtLeast(int plevel)' method. Also added 'IsMaxPlevelAtLeast', but that isn't used
		by anything currently.
	(SL)	Changed all the code which tested plevels to use IsPlevelAtLeast, in the process eliminating some bugs -
		some of the checks were doing > instead of >=, and since they all now use IsPlevelAtLeast, that's no longer a
		problem.
	
	Item.cs:
	(SL)	Changed the one line of code which tested a plevel to use IsPlevelAtLeast instead.
	
	Thing.cs:
	(SL)	Changed a plevel check to use IsPlevelAtLeast instead.
	
	scripts/defaults/type_by_profession.cs:
	(SL)	Changed some plevel checks to use IsPlevelAtLeast(plevel).

Sept 13, 2004:
	ScriptFilesCollection.cs:
	(SL)	Discovered during testing that SE was attempting to load the files in 'import' during resync, since apparently
		it uses a different method for finding new files, so I added the avoided-dir code to that one too.
	(SL)	Discovered during testing that the UberInsideSectorEnumerators were never being disposed (Since they weren't
		being used in a foreach or using); Corrected that.
		
	Common/UberEnumerator.cs:
	(SL)	Removed a debug message, once it was actually getting called (it's in Dispose).

	Character.cs, Thing.cs:
	(SL)	Testing revealed that CanReach was failing (NPE) on PCs. Corrected, by making GetObjectToCheck return
		an IPoint6D instead of Thing, and having it return 'to' instead of 'null' if the thing had no topobj
		(It was returning null before because 'to' was an IPoint6D and the return value was Thing).
	
	InPackets.cs:
	(SL)	Testing revealed that the code which said "You can't reach that" didn't make the client think it couldn't
		pick the item up, so I made all the code which did that send PreparePickUpFailed instead, which works nicely.
	(SL)	Testing showed that the 0x28 packet doesn't seem to do anything; The client already forgets the held item
		when it tries to drop it, expecting it to be resent shortly thereafter. (It wasn't being used, but I wanted
		to see if it was necessary or even useful - it wasn't :P)
	
	PacketSender.cs:
	(SL)	Marked PrepareDropFailed and PrepareDoneShowPaperdoll obsolete.
	(SL)	Added more packet-preparing methods, including PrepareCancelTarget (Yes, it really cancels the
		targetting cursor). :)
	(SL)	PrepareCharacterInformation supports sending mounts now.
	
	
	InPackets.cs:
	(SL)	Made HandleTarget make sure that the specified static ID exists on the requested coordinates
		(But it doesn't work properly yet).
	
	GameConn.cs:
	(SL)	Added the following methods:
		bool IsValidTarget(Thing thing)
		bool IsValidTarget(ushort staticId, ushort x, ushort y, sbyte z)
		bool IsValidTarget(ushort x, ushort y, sbyte z)
	
	LowLevelOut.cs:
	(SL)	Added EncodeBool.

	Character.cs:
	(SL)	Moved mounting closer to being functional. In fact, you can actually see mounts now, if the new
		PacketSender method for sending character info is used, and you can mount anything with a mountitem
		variable in their chardef (which is nothing, at present, but I manually added one for gray horses
		in my modified local scripts in order to test this). This will be made more complete as PacketSender
		and NetState are completed.

Sept 11, 2004:
	NetState.cs, PacketSender.cs:
	(SL)	Ported more sending-methods to PacketSender, worked on NetState.

Sept 10, 2004:
	Character.cs, others:
	(SL)	Changed 'account' to 'Account', 'owner' to 'Owner', and '_owner' to 'owner'.
	(SL)	Changed some NaturalDocs comments to javadoc comments.
	(SL)	Made the direction properties return direction&0x7, so we can potentially use the unused 5 bits of direction
		for flags. 0x40 is now used for Flag_Moved, which is set when a character walks/runs/flies, and is cleared
		by NetState. It indicates to NetState not to resend the character if it has only moved ... Hmm.
	
	NetState.cs, PacketSender.cs:
	(SL)	Worked on NetState.
	
Sept 9, 2004:
	Thing.cs:
	(SL)	Tested various things to make sure they still worked.
	(SL)	Removed the 'discardlastpacket' call from the sound commands, since the sendtoclients* methods now
		discard automatically.

Sept 8, 2004:
	Packets/LowLevelOut.cs:
	(SL)	Added EncodeZeros, which is faster than EncodeInt(0, pos), etc, and faster than repeatedly calling EncodeByte
		in a for loop, etc. It is called like so: EncodeZeros(amount, pos). Pos is at the end because that's how all
		the Encode functions are. I pondered changing them to all have pos at the front, but I'm trying to convert
		the OutPackets packet-making methods to PacketSender without much hassle. And as long as it's consistant,
		there probably won't be any problems, so I've left pos as the last arg. Note that the Encode* methods
		in here (for PacketSender) always write to the uncompressed data buffer, they don't take an array parameter
		like the ones in OutPackets do.
	(SL)	Fixed the unicode methods here.
	(SL)	EncodeByte is intended for use instead of directly trying to modify uBuffer, by the way. Looks cleaner this way.
	(SL)	Moved the packetGroup stuff to a new file named PacketGroup.cs.
	(SL)	Made all the methods for working with PacketGroups internal, and made PacketGroup's own methods
		call them, so it is more OO and less mistake-prone, too. Specifically:
			Renamed NewGroup to BeginMakingGroup, and made a new NewGroup method which returns the PacketGroup immediately.
			Modified stuff so that Lock() didn't need to be called (the group would automatically do that itself when
			you tried to send it, if it wasn't locked already).
			Then made NewGroup internal too and made a public PacketGroup constructor which sets PacketSender.curGroup,
			meaning that NewGroup/BeginMakingGroup are no longer needed.
	(SL)	PacketSender trace messages.
	
	Packets/PacketGroup.cs:
	(SL)	Made PG implement IDisposable, with a Dispose method which calls PacketSender.DiscardGroup if the PG
		is not already discarded.
		
		PacketGroups are now easier to use. Example of the old way:
			PacketSender.NewGroup();
			PacketSender.PrepareOpenContainer(this);
			if (Count>0) {
				PacketSender.PrepareContainerContents(this);
			}
			PacketGroup packets = PacketSender.LockGroup();
			packets.SendTo(conn);
			PacketSender.DiscardGroup();
			
		Example of the new way:
			using (PacketGroup packets = new PacketGroup()) {
				PacketSender.PrepareOpenContainer(this);
				if (Count>0) {
					PacketSender.PrepareContainerContents(this);
				}
				packets.SendTo(conn);
			}
		Much better!
		
		I've changed LockGroup and DiscardGroup to internal (They are still used internally by PacketGroup).
	
	Packets/MediumLevel.cs:
	(SL)	Renamed CompressPack and CompressPackAs to Compress and CompressAs, renamed SendPacketTo* to SendTo*.
	(SL)	PacketSender trace messages.
	
	Packets/PacketSender.cs:
	(SL)	Added more Prepare* methods.

	Item.cs:
	(SL)	Added ShortAmount property, which returns a ushort amount capped at 50,000, for when amount is
		included in a packet as a ushort. This isn't used in item names, mind you, since amounts there are just
		strings.
	
	UberSectorEnumerator.cs, Character.cs:
	(SL)	Tested and debugged EnumeratorOfClientsWhoCanSee and CanSeePoint.
		Added documentation comments to CanSee, CanSeeTo, CanSeeFrom, and CanSeePoint.

Sept 7, 2004:
	ItemDef.cs:
	(SL)	Added FieldValues UseSound and DropSound.
	
	Item.cs:
	(SL)	Added On_DClick and made it make a sound, and made On_Dropon_Ground and On_Dropon_Item make a sound,
		if UseSound or DropSound, respectively, which are on the itemdef, aren't INVALID_SOUND (the default).
		
		Right now, none of the defs have sounds on them, but this could be used to give containers opening sounds,
		etc.
	
	Container.cs:
	(SL)	Since this overrides On_DClick and doesn't call the base one unless its Use fails, this sends the sound
		in Use, if it succeeds.
	
	Enum.cs:
	(SL)	SoundFX enum.
	(SL)	Added entries to SoundFX for sounds 0-162. There are comments too, usually where I wasn't sure what something was.
	
	Thing.cs:
	(SL)	Added SendSrcSound(SoundFX sound)
	(SL)	Added Sfx command which expects its argument to be in sphere-hex format, so if you try to play a sound from
		Axis, it will work (Axis runs this command).

Sep 6, 2004:
	WinConsole/
	(iwan)	Large changes: Connection form added, links to file&line and simple (very lazy)
		file viewer added, SteamConsole class can be basic class for all SE consoles, IConsoleListener 
		is used by SteamConsole to communicate with user side of console, WinForm renamed to
		WinConsoleForm, which implements IConsoleListener, WinMain.cs removed, many bugs are fixed.
		I think, win console has final appearance and all fundamental features are implemented now.

	src/
	(iwan)	Striped column info from some error/warning messages (due to console links, they dislike
		columns:)

	common/IniHandler.cs:
	(iwan)	added ContainsGroup and RemoveGroup methods to IniHandler class
	
	common/LogStr.cs
	(iwan)	methods LogStr.FileLine(object) and LogStr.FileLine(string) replaced with 
		LogStr.FileLine(string file,int line)
	(iwan)	added LogStr.ParseFileLine(string, out string, out int) method

	common/ConAttrs.cs
	(iwan)	Control chars are stored in constants

	src/MainClass.cs
	(iwan)	There is a bug, which make possible to run SE, even if ShowMessageAndExitException is thrown
		(only if starting from console). I fixed it, but it's dirty hack. Real cause is 
		ShowMessageAndExitException itself. This exception cannot be catched in MainClas.WinStart
		method.

	Statistics.cs:
	(SL)	Added XML comments to the public stuff in this class.
		Damnit, the documentation generator ignores my comments.
		But it generates comments for 3rdParty\Grammatica\Peretcetc..
		*looks closer* Hey, those are javadoc-style comments. So that's why. Weird. Well, sigh, guess I need to
		change some more comments again. *does so* ... At least I like javadoc-style commenting better than
		XML-style commenting, anyways, so that's a plus. But the NaturalDocs comments were nice too.
		
		Okay, so what use is this big XML file? Why doesn't it make some HTML pages or something, like
		NaturalDocs does? I wanted to have a nice readily available reference for the Statistics class
		while I implement the statistics stuff for PacketSender - I didn't want to have to search through
		Statistics.cs for the documentation, and having to search through a 1 MB XML file is no better.
		I'm aware that Visual Studio can use the XML file for intellisense and stuff, but that's of
		no use to me since I don't use Visual Studio (And I don't want to).
		
		I suppose I could code an XSL or whatever you call it thing to change it from XML into HTML,
		but why doesn't something like that already exist? And I want to work on the packet stuff,
		not on the documentation generator... Which I can't even find any source for, for that matter,
		which is odd (Considering the GPLed nature of the rest of the stuff on CVS).
	
	(SL)	Added an xslt folder, and index.xslt, and code to CompileDocs which runs the .NET thingy which reads that
		and tries to do a conversion. Of course, I don't know XSLT, and all I know about it I learned from the
		two or three examples in the .NET SDK help files. There doesn't seem to be a comprehensive reference (or any
		kind of reference) about XSLT in the .NET SDK help files, and since I'm not online, I can't really find one,
		so I couldn't make index.xslt do a whole lot. In fact, it doesn't do much of anything at all. But someone else
		could finish it later, or I could, eventually. Plus, you'd probably need multiple xslt files, but don't ask me
		how you'd accomplish making a separate page for every class, method, etc.
	
	(SL)	Added a new feature: Connecting particular variables or rates to a specified variable, making them not
		display in output if that variable's total data is not high enough. This is used by PacketStats to tie
		the statistics for each individual packet ID, and for the different packet size ranges, to the number of packets
		recorded for those packet IDs or ranges. Currently, they won't appear unless there are at least 10 packets
		for them. Thus, all the packet IDs that are never used shouldn't appear at all, and there won't be ones shown
		for any packet IDs or size ranges which don't have hardly any data. This is untested, however, because
		I haven't yet begun moving over the Prepare* methods and such for PacketSender. Well, I did the first one, but
		it's late now, so I'll do the rest later.
	
	WinConsole/SteamConsole.cs:
	(SL)	Added System.Xml.dll to the list of referenced assemblies.
	
	Sector.cs:
	(SL)	Fixed a bug in Remove which was making it not remove players from the list of Things (It was
		only removing them from the list of players). This particular bug would never have been caught
		without sanity checks, and if it had stayed in, it would have resulted in a bunch of wasted memory
		usage and wasted CPU time later on, from having every sector's things list contain every player
		that had ever been in it - plus, if no sanity checks existed on this, then the attempt to add
		them back would have succeeded, resulting in duplicate entries. In effect, the more players
		ran around, the more memory usage would increase and the slower enumerating over things in an area
		would get. Plus you could also have things triggering on players multiple times... Anyways,
		it was the sanity checks which caught the bug, and the trace info stuff which helped me find
		and confirm the cause of the problem. It's really convenient to be able to toggle a value in the
		.config on or off to turn on or off specific tracing information, instead of being bombarded
		with tons of debugging information that I don't need to look at right now. :)
		Plus, since the trace info messages are bright orange, they stand out better than debug messages.
		(But don't even THINK of making the debug messages bright orange too, because then I wouldn't
		be able to find the trace messages when I need to :P)
	
	Packets/PacketStats.cs:
	(SL)	New file.
	
	Packets/LowLevelOut, MediumLevelOut, HighLevelOut, PacketSender.cs, docs/plans/packetsender.txt:
	(SL)	Further work on PacketSender, particularly on PacketGroups. Comments were added to the public
		methods, as well, and packetsender.txt is decent documentation for them as well now. It also includes
		some information on the not-so-public methods, as well as information about (possible) plans for
		RepeatablePacket classes, which may or may not be made, depending on whether it turns out that they
		would be useful and give an efficiency gain - especially considering that the PacketGroups are now pretty
		damned good on their own, especially now that you can Free them from PacketSender (copying their compressed
		data into a new buffer so they are separate from it and can be kept around for however long you want).
		Basically, RepeatablePacket will probably get done IF it turns out that compression does not take as long
		as generation, and that re-generation of only a few changeable arguments is significantly faster than
		re-generation of the entire packet - If it turns out that generation takes virtually no time, and that
		compression is slower, then it there would be no point in making RepeatablePacket, since compression
		HAS to be done whenever the uncompressed data changes, and cannot be done for only one part of the packet*.
		
		* = Technically, if your changed data starts at a specific position in the uncompressed packet, and you have
		recorded what position in the compressed packet this corresponds to, THEN you WOULD be able to skip recompressing
		everything before that position in the compressed packet, but you would have to recompress everything at
		or after that position still. However, note that doing this would require the addition of code to the compression
		method in order to check the in-index and record the out-index when the in-index equals a specified value,
		and this would slow down compression slightly, depending on how it was implemented (You could split the loop
		into two loops with only a slight cost, as opposed to the not-so-slight cost of adding another CMP+JCC ("if")
		inside the main loop of the compression method). You would also need to store the value of two local variables
		in the compression loop for that point in the process, and you would need to make a new compression method which
		could load those values initially and work from there. You wouldn't need to make it start at a specific position
		in the uncompressed data if you discarded the uncompressed data at the beginning which would never change after
		the first time the compression was done - otherwise, you would need to. These are not things that would be
		TOO difficult to do, but they would take a few hours to code, and they would slow the compression down, but only
		for the first time the uncompressed data is compressed - after that, it would be sped up because it wasn't 
		compressing the beginning. At any rate, this would need to be implemented in a new (separate) compression
		method so as to not needlessly slow down compression of packets which don't need this functionality -
		and even just the extra arguments being passed would cost a little extra time (which is why most of the
		compression methods used now don't take the buffer to read or write to as a parameter, and instead they
		use a standard buffer always, and if someone wants the output somewhere else, they can copy it there afterwards
		or call a slightly slower version which does take refs to the buffers as parameters).

	
Sept 5, 2004:
	Thing.cs, Item.cs, Character.cs, Equippable.cs, Container.cs:
	(SL)	Cont, Model, Weight (and others, I think) capitalized. (Underscore-prefixed private members were changed to
		just lowercase, and the original lowercase properties were capitalized)
	(SL)	Fiddled with ChangeP, making Thing's version of it call Map.ChangedP(this, oldP),
		which now does the job of figuring out what to tell the appropriate sectors. Also,
		it's more robust now, and ChangeP can be called when a Thing moves to or from invalid
		coordinates, and it will work correctly. Before, it relied on callers to figure that
		stuff out (this is much cleaner and safer). Also renamed Map's instance methods
		RemoveFromP and ChangedP to RemoveFromPImpl and ChangedPImpl, and made them private
		(they're called only by the static ChangeP method). (Sticking Impl on the end of the names
		is another Microsoft suggestion)
	(SL)	Added CharacterTracingOn and MapTracingOn and the appropriate settings in WinConsole/App.config.
	(SL)	Added a new P() method: public void P(ushort x, ushort y, sbyte z, byte m, MovementType mtype) {
		The default mtype is Teleporting. This particular variant is called by WalkRunOrFly, which
		passes a movement type of Walking or Running (and possible Flying in the future). CheckVisibility
		is called by this P() method (and all the others, since they all call this one).
	(SL)	Made flag_Disconnected (private, Character sets it on login or logout) do RemoveFromView()
		when disconnecting or ShowToAll() when connecting. ShowToAll is a new alias (in Thing) for Resend,
		since it doesn't make much literal sense to "Resend" or "Update" someone who just logged on.
		Later, this could call CheckVisibility, with the flag set to 
	(SL)	Removed GetName and replaced it with a DecoratedName property.
	(SL)	Title, Color, Amount, Rider, Mount capitalized.
	(SL)	Flag_YellowStatusBar changed to Flag_Hero. This is already used in LOS checking to designate more
		important NPCs, but could also be applied to important PCs, and I imagine this could be useful to a
		bunch of scripts.
	(SL)	'action' was made private and given a public (& capitalized) property.
	(SL)	P5D() was changed to a get property. (It returns a Point5D based on the thing's point4d and height)
	(SL)	Point5D TopPoint was added to Thing. It returns TopObj.P5D. This is cached by NetState to know where to send
			RFV packets after an item in a container is deleted.
	(SL)	Added ThingsInRect(Rectangle2D), ItemsInRect, CharsInRect, PlayersInRect, StaticsInRect, DisconnectsInRect,
		and ClientsInRect with the same parameter and purpose, and also ClientsInRange(int range), and ClientsInRange().
	(SL)	Updated Character's EffectivePriorityClass(one, two) to work if two is null, and changed the two CanSee methods
		which take a Thing target, so that instead of passing the thing's P() as the target coords, they pass its
		TopPoint instead. Renamed the CanSee method which does the real work to CanSeeImpl and made it private.
		Made CanSeeImpl take an IPoint6D instead of Thing, since Thing implements IPoint6D, and added a
		CanSeePoint(IPoint6D) method, which is used by another new class...
	(SL)	Added ClientsWhoCanSeeThis() to Thing (returns an EnumeratorOfClientsWhoCanSee).
	(SL)	Made EffectivePriorityClass(one, two) look at the TopObj of two instead of two itself - and
		renamed the 'two' parameter to 'twoP'. (This is a preemptive-bug-fix).
		
	Map.cs:
	(SL)	Changed GetRealMapNumber to internal since it is only used by Statics (and was used by OutPackets,
		but not anymore). I was going to change IsValidPos, GetMapSizeX, etc, to call GetRealMapNumber, but it appears
		that they already treat maps outside the ones known as map 0, so I didn't change them. However, if someone
		ever wants to have one of OSI's newer maps be used on more than one mapplane, this will need to be changed.
	(SL)	Added XML comments to a number of the methods in Map.cs, but not all of them (Just doing a few XML
		comments in between working on other things, like I was commenting other things before, a little every so often).
	(SL)	Added ClientsInRect, ClientsInRange, and ClientsWhoCanSee.
	
	UberSectorEnumerator:
	(SL)	Added EnumeratorOfClients, which extends EnumeratorOfPlayers but returns the GameConn for the player
		instead of their character. Also, made EnumeratorOfSectorContents' Current property virtual so that
		EnumeratorOfClients could override it to change what was being returned (EOC calls base.Current, does
		sanity-checking, and then returns the conn for the Character that base.Current returned).
		*InRect isn't actually used by anything, but I saw that tar had used it in some of his code, so I added it.
		ClientsIn* is used by the new PacketSender code, which has its own ClientsInRange and ClientsInRect methods
		which operate on an IPoint5D.
	(SL)	Added EnumeratorOfClientsWhoCanSee, which does what it says. It actually extends EnumeratorOfPlayers
		instead of EnumeratorOfClients, but that's because I didn't want to be getting the Character from the GameConn
		that EOC returned (after it had gotten it from the Character!) - This has to be able to call the Character's
		CanSeePoint method. And these classes are tiny anyhow, so it didn't matter if I duplicated five lines of code.
		Well, eight if you count the 'get {' and two '}' lines.
		
	
	NetState.cs:
	(SL)	Newly created. Contains the following classes and interfaces:
			internal abstract class NetState
			internal class ItemNetState : NetState
			internal class CharNetState : NetState
			internal interface IThingState : IPoint4D
			internal abstract class ThingState : IThingState
			internal interface IItemState : IThingState
			internal class ItemState : ThingState, IItemState
			internal interface ICharState : IThingState
			internal class CharState : ThingState, ICharState
			
			
		The interfaces and their implementors are a comprehensive representation of all the changeable properties
		which could  require the sending of updates to clients.
		
		The static method NetState.AboutToChange(Thing) is called just before making a change which would require
		an update to clients (of any kind), and NetState will hand it off to the appropriate subclass
		(ItemNetState or CharNetState), which will take a snapshot of the Item or Character using either
		a new ItemState or CharState object (whose constructors take snapshots of the Item or Character,
		and ThingState does the same for Thing's members (except Cont, which ItemState captures instead since
		it has no meaning for Characters)).
		
		The ItemNetState or CharNetState objects will also record a reference to the Item or Character
		(it's actually recorded by NetState as a Thing, though, and ItemNetState and CharNetState each
		have properties which return it as an Item or Character for their own use).
		
		Also, Item and Character implement IItemState and ICharState, respectively, and Thing implements
		IThingState.
		
		The only thing Item or Character has to do is call their AboutToChange() method (inherited from Thing),
		which checks that thing's private bool netStateChanged, and if it is false, it calls
		NetState.AboutToChange(this) and sets netStateChanged to true. Nothing else has to be done. Because
		the ItemNetState and CharNetState objects keep references to their appropriate Item or Character, they
		*don't need to be updated when the state changes again*.
	
		When it's finally time to handle all the changes and send out updates over the network, NetState
		starts popping NetStates off its stack (They were added when the ItemNetState or CharNetState was instansiated*),
		and calling their SendUpdates method (which is protected abstract on NetState itself). When that's all
		done, the static NetState Stack will be empty, and all the netStateChanged flags will have been reset to false,
		ready for a new cycle.
		
		BTW, a flag-based NetState wherein things specify what is about to change, would have taken more RAM
		per thing by requiring the thing to keep a reference (even if it is null) to its NetState so that it 
		could update it, or keeping the flags variable right on the Thing, which would take at least a byte.
		Instead, the way I've done it, things need only 1 extra bit, a tiny size increase!
		Of course, you have the temporary ItemState & CharState stuff being created once per changed item per
		cycle in which it changes, but .NET's garbage collector will do wonderfully with them, just like it
		does with other variables which last tiny amounts of time (Or so sayeth Microsoft).
		
			* Does anyone else spell that this way? AFAIK the correct way is "instantiated," but I've always used
			"instansiated" instead. Plus "instansiated" flows better (verbally).
	
	LowLevelOut.cs, MediumLevelOut.cs:
	(SL)	Much work on the new PacketSender implementation. LLO is done but untested, and MLO is now (mostly)
		done as well. Pretty much the only thing left for MLO is to rip out the hardcoded-statistics-stuff left from
		before, and replace it with code which uses the Statistics class.
		I need to ponder how to have things use the groups, though, and whether I'll have to make NewGroup and LockGroup
		public (or at least internal). Ideally, those would only be used internally by PacketSender, but that may be
		too restrictive - But this will mostly depend on NetState, which I will probably be completing while I complete
		PacketSender. The framework(s) for both PacketSender and NetState are in place now, though.
	
Sept 4, 2004:
	Character.cs, other files:
	(SL)	Moved from Server.cs to Character.cs the following methods:
		CanRename, CanSeeCoordinates, CanReach, CheckForObjectsBlockingLOSToThing, CheckForObjectsBlockingLOSToPoint,
		CheckForStaticsBlockingLOSToPoint, CanSee, and NPCHeroCanSee.
	(SL)	Added a PrioritizedCanSee overload for looking at items, and PrioritizedCanSeeTo and PrioritizedCanSeeFrom.
		Removed 'Prioritized' from the name, renamed the original CanSee to BestCanSee.
	
	Map.cs:
	(SL)	Removed ChangedX, ChangedY, ChangedXY, ChangedZ, ChangedXYZ, and ChangedXYZM, and replaced them 
		with a single ChangedP method. It'll be a tiny bit slower, but a lot cleaner.
		Did the same for Thing. Map also has a RemoveFromP method. The methods in Map are called by ChangedP on
		Thing.
		
	Point.cs:
	(SL)	Changed cont to Cont and _cont to cont in Point6D and IPoint6D.
	
Sept 3, 2004:
	ConvertTools.cs:
	(SL)	GetBool now returns false if the string passed is null, which is the case if you try to get an entry from
		the configuration file, but the entry doesn't exist:
			ConvertTools.GetBool(ConfigurationSettings.AppSettings["Statistics Trace Messages"]);
	
	Statistics.cs, GameConn.cs:
	(SL)	Work on Statistics.cs, which is a more generalized statistics module. It is now used by GameConn
		(The previous code was good as a prototype). And tested! And it works nicely.
		
	Globals.cs:
	(SL)	NetStats command for showing the GameConn statistics. PacketStats command (which doesn't do anything currently)
		for the new out-packet stuff.
		
	Enums.cs:
	(SL)	Added some enums for the new out-packet stuff.
	
	Packets/HighLevelOut.cs, Packets/MediumLevelOut.cs, Packets/LowLevelOut.cs:
	(SL)	Initial work on the new out-packet stuff.
	
	AssemblyInfo.cs:
	(SL)	Added a bunch of securitypermission stuff to the AssemblyInfo.cs file, but since compilation of
		scripts then failed, I commented it all back out for now. At some point, someone could go through and
		figure out what SecurityPermission was causing the failure, because .NET doesn't want to just tell us,
		apparently.
	
	Logger.cs:
	(SL)	Added a static WriteLogStr method to Logger, which calls instance.WriteLine. This is used by Statistics.cs
		to print pretty messages. Well, I think they're pretty anyways, but I think we need a green color too. :P
	
	App.config:
	(SL)	Added:
		<add key="GameConn Trace Messages" value="off" />
  		<add key="Statistics Trace Messages" value="off" />	<!-- This is the statistics collection and analysis module -->
  		These control whether trace/info messages are displayed by those two files. (The optimized build won't ever
  		show them, since it has trace off) The messages are actually shown with Logger.WriteInfo, and are shown in the
  		Highlight color currently.
	
Sept 2, 2004:
	GameConn.cs:
	(SL)	Asynchronous sending and receiving support completed. Performance testing & comparison code for comparing
		that with the preexisting synchronous sending and receiving code has also been added.
	
	Logger.cs:
	(SL)	WriteInfo added to Logger. It takes a bool and prints a message in the highlight color if the bool is true.
		This is intended for use with the new tracing code which can be toggled on and off via the configuration file.

September 1, 2004:
	(tar)		I made some big changes... no need to mention single files, because it involves just about evry one of them :)
		Some of the changes were already commited previously, so that they are even referred to in SL's changes prior to this one, 
		but since I did not write them down at that time so I have to do it now...
		Map: There is now a Map class which is instantiable. Every instance contains a net (2-dimensional array) of Sectors, 
			and it is always instantiated for every used mapplane. The sectors keep reference to the items, characters and players
			which are lying/walking on their surface. besides each sector has a link to it's corresponding
			StaticSector, which represents the data from mul files. Though currently SE can handle only the first map (map0.mul etc.), 
			I think it is quite well prepared for the others as well.
		Packets: The OutPacket class should now be considered deprecated. 
			It's code should be moved to respective Packet subclasses (and to the areas where from the Packets
			are used). The Map class now has support for enumerators, which should be used instead of the NearByMethod stuff.
		Things: Container and Equippable classes are no more in the core. all their functionality is now implemented
			in the Item class, they only have to be "enabled" by the scripts. This was done because I wanted to have 
			the possiblity to have one scripted "base" class for all items and for all characters, etc. 
			I also plan to have a separate -Def class (the factory class like ItemDef, Chardef etc.) for every scripted
			Thing subclass (i.e. there would be EquippableDef, ContainerDef, etc.)
			The way of updating Things to clients is changing... now whatever possible will be updated as "delayed", 
			i.e. at the end of each tick. why? a simple script could change an item's amount, color and position, all that basically
			instantly... in every of these changes, it is internally noticed (and queued) that the item needs update and then the packets are sent, 
			which contain all the 3 changes, instead of having 3 separate packets sent for every of the 3 changes.
			The same applies to character. 
			
		out of these mentioned areas, nothing is really finished, this commit was "premature", because SL needed to be updated.
		the notice in TODO about things not working is still valid.


Aug 31, 2004:
	Point.cs:
	(SL)	Fixed some erroneous checks in Point5D (testing if m==height, heh!), among other things.
	(SL)	Added IPoint6D and Point6D which have TopObj, cont, IsEquipped, IsInContainer, IsOnGround, etc.
		This is so we can use IPoint6D objects with CanSee, CanReach, etc, to avoid having a bunch of different
		copies of the method for different stuff.
BUG?		Operators == and != in Point5D don't test height, but Equals() does. [Fixed]
	
	Character.cs:
	(SL)	Fixed war-mode so that it sends 0x77 to all players except the source, who gets a normal warmode packet
		(We have to send the 0x77 to others because the warmode packet doesn't have a UID field).
	(SL)	Got PrioritizedCanSee working properly for players.
	(SL)	Got update range working and got characters so they see other characters appearing when they move around
		(CheckVisibility(oldP, newP, movementType(Walking, Running, Flying, or Teleporting)). They don't see items
		yet.
	
	Thing:
	(SL)	TopObj is a property, not a method, now.
	(SL)	Implements IPoint6D.

	Server.cs:
	(SL)	CheckDist and CheckRectDist take an IPoint6D for target now, and do the distance check with its TopObj.
	(SL)	Fixed bug that was making CanSee return false on non-mounted characters (instead of mounted characters).
	(SL)	Made CanSee and CanReach ALWAYS use a rectangular update range so as to not confuse people with lower
		update ranges - the color shading for update ranges shows the update-range as a rectangular area, not a spherical
		one. We could make it a Cube, though, by including z levels, although the current LOS code should already
		prevent seeing things on different floors, through walls, etc.
		
		

	Common/Sanity.cs:
	(SL)	Added StackTrace method for printing a stack trace without throwing an exception.
	
	GameAccount.cs:
	(SL)	Moved UpdateRange here, and added it to saving and loading, since the client doesn't remember it from
		session to session.
		

Aug 30, 2004:
	Character.cs:
	(SL)	Added a Disconnect method.
	(SL)	Added virtual byte NPCUpdateRange property, and NPCUpdateRangeSquared, which could be overridden in
		compiled scripts.
	(SL)	Added Trigger_SeeMoving, Trigger_See, Trigger_LostSightOf, and PrioritizedCanSee.
	
	Thing.cs:
	(SL)	Added P5D() method to return a P5D based on point4d, but including height (For passing to various methods).
	
	Server.cs:
	(SL)	Made CanSee methods take Point5D instead of x,y,z,m,height.
	
	
	OutPackets.cs:
	(SL)	Made a SendTinyPack method which always uses Compress5F (faster, no passing arrays since it knows where
		they are) and never Crushify, since Compress5's performance on tiny packets is better than Crushify's, probably
		due to overhead from calling functions exported from a DLL.
	
	Item.cs, scripts/defaults/defs.scp:
	(SL)	Swapped move_always and magic so that move_always corresponds to the client-side flag bit for move-always.

	GameAccount.cs:
	(SL)	Allshow added, which for now simply makes SendNearbyStuff include disconnects.

Aug 29, 2004:
	(SL)	Once I could see things, I fixed:
		1. Creating backpacks (was trying to remove the backpack from the sector for 7000,0)
		2. Updates sent for things being created. Specifically, they were being sent before they should have been.
		3. WalkRunOrFly not showing movement for NPCs.
		4. Renaming and adjusting "SendUpdatePlayerPackets" to do what it ought to do, which is to tell clients that
			a character (NPC or PC) has moved.
	
	TagHolder.cs:
	(SL)	Added Has(string) and Exists(string) methods, primarily for scripts, which look at public instance properties
		(and ONLY properties) of the object and determines if one matches that name, and if so, if it is set to null.
		(Returns DoesItHaveIt.No, Yes, Maybe, or No_Such_Name - .show prints them nicely, and No resolves to 0 and Yes
		to 1, which should work good for scripts (if LScript auto-converts enums to numbers? That should be easy,
		I think).
	
	MemberWrapper.cs:
	(SL)	Found and fixed two bugs in PropertyWrapper while adding the Has/Exists code:
		1. If a property lacked a getter or setter, then PropertyWrapper died trying to make one. Now, it doesn't,
			and instead, if the getter was nonexistant, the generated PW's GetValue() returns null, and 
			if the setter was nonexistant, the generated PW's SetValue simply returns without doing anything.
		2. The code for generating GetValue() was screwing up the outputted IL if the property was a value type, by
			trying to unbox the class and load its address instead of casting it - In that case, it should have
			been checking to see if obT, not pt, was a value type, so I fixed that.
	
	Globals.cs:
	(SL)	Made ObjToString check if obj is Enum and if so, convert "_" to " ", which makes DoesItHaveIt.No_Such_Name
		display like: 'has(foobar)' for 'SL (0x0)' is 'No Such Name'. I'm pondering whether this is a good idea or not,
		but having it say "is 'NoSuchName'" or "is 'No_Such_Name'" makes me say "Ick." Hopefully it won't confuse
		anyone. We'll have to mention it somewhere.
		
	
	Numerous files:
	(SL)	Killed ALL the Nearby* stuff, and replaced everything with foreach loops using much nicer and more
		efficient code. After verifying that it was all dead, I removed it all from the source (rather than
		leaving it all commented out) - It took up quite a bit of space, and the new stuff is definitely superior
		to it.
		
	Map.cs:
	(SL)	After killing the nearby stuff, hooked up the ChangedX, ChangedY, ChangedXY, and RemoveFromXY
		methods in Map (which were empty before), which handle determining if things have moved into
		a new sector, and shuffling them out of the old one and into the new if need be.

	scripts\defaults\types\type_animations.cs:
	(SL)	Changed the code which tested the 0x02 flag to call IsAlive instead.

	GameAccount.cs, GameConn.cs, InPackets.cs:
	(SL)	Fixed all the code that tested index > maxCharactersPerGameAccount instead of >=.

	InPackets.cs:
	(SL)	Changed the last two remaining lines of code which did *256*256*256 blah blah to decode data, which now
		use DecodeInt. Those two were two of the earliest packets which were supported
		(DeleteCharPacket and LoginChar), and they hadn't been updated yet. There are probably some still manually
		getting values using shifts, but there's no rush to change those ones.

	Server.cs, OutPackets.cs:
	(SL)	Speech method to replace the nearby* speech stuff completely. SendSpeech/Emote/Whisper/Yell all call
		Speech now. It's more efficient than the old code, prettier, and supports NPCs hearing stuff too.
		(It only compresses the packet once instead of over and over, too, and doesn't compress it at all if no players
		will hear the speech)
	(SL)	Players can't speak in arbitrary fonts anymore - all player speech is forced to font 3, but if anything
		DOES make speech or send messages in any other font (for example, runic), it is sent in ASCII so it is shown
		correctly. (That can happen if, for example, you script a sign which shows a message in runic whenever a player
		clicks it, instead of showing its name - like in Ultima 5.)
	(SL)	Added CompressTo(out byte[] retarray, int len) for Packet classes, which uses the first empty part of 
		outpacket to compress to, then creates retarray and copies the compressed data into it. It does not disturb
		any packets currently stored in outpacket, and does not affect the state of outpacket at all (besides writing
		to a part that isn't in use, which won't affect anything).
	(SL)	Added int GenerateStatusBarPacket(Character cre, StatusBarType type) for StatusBarPacket. Generate*
		methods only write the uncompressed packet data to opacket, they do not compress it or do anything else
		with it after writing it. They are for use by Packet classes which call CompileTo after calling a Generate*
		method.
	(SL)	Changed a number of methods to Generate*, leaving compressing their output up to higher-level code
		(e.g. SendSoundPacket(conn, source, soundID) calls GenerateSoundPacket and then SendPack, others call
		PrepareToSendOnePack or PrepareToSendNewPack, etc, and later ReallySendOnePackMultipleTimes or ... etc.)
	(SL)	Made it possible to have multiple packets stored with PrepareToSendOnePack by specifying a start index
		(that method is overloaded now) and also, to send any one of those packets (rather than all at once or only
		the first one, etc) with ReallySendOnePackMultipleTimes. This is only used by the send item information
		stuff, which has one difference in what it sends to GMs, and I didn't want to have to keep rewriting and
		recompressing it, etc.
	(SL)	Note that with the new foreach stuff for everything which sends to (potentially) multiple clients,
		the packets are not constructed and compressed until the first connection is found that they should be
		sent to, but after that the already-compressed packets are used. There are exceptions for the methods
		which send different packets to different clients, the most notable one being UpdatePaperdollAndStatusBars
		(See today's entry for Packet.cs).
	(SL)	SendUpdateStats, SendUpdateHitpoints, SendUpdateMana, SendUpdateStamina.
	
	Packet.cs:
	(SL)	Added StatusBarPacket, which is used by ResendPaperdollAndStatusBars for more efficiency. Specifically,
		there are three kinds of status bars which could be sent, so a 'StatusBarPacket[3] statusBarPackets' is created
		in ResendPaperdollAndStatusBars, and as it enumerates over every player, it determines the right type of status
		bar packet to send, and calls the StatusBarPacket constructor & stores the result in the array, unless it already
		exists in the array, in which case it just sends the existing one.
		
		StatusBarPacket compressess its packet immediately after making it, because it uses opacket as the buffer
		to write to. It does not have (or need) a PacketBuffer. It does have its own buffer to store the compressed
		data (that's essential for this purpose), but is originally compressed elsewhere as well (since compressed
		packet size is not easily predictable) and later moved into its own buffer (which isn't allocated until the 
		required size is known).
		
	Enums.cs:
	(SL)	Added SpeechType enum.
	
	Character.cs:
	(SL)	Added Trigger_Hear, On_Hear, @hear, for NPCs hearing speech. Called by Server.Speech.
	(SL)	Added UpdateStats, UpdateHitpoints, UpdateMana, and UpdateStamina for calling the methods in OutPackets
		which send the packets which do those things. (Also uses maxhitpoints/mana/stamina)
	
	Item.cs, Characters.cs:
	(SL)	Removed removePacket member and adjusted stuff to call Server._out.RemoveFromView again. (More efficient)
		I did also improve RemoveFromView, by the way, along with all the other stuff that was using Nearby*.

Aug 28, 2004:
	ScriptFilesCollection.cs:
	(SL)	Added AddAvoided(string folder) method, and private bool IsAvoidedDirectory(DirectoryInfo folder), and
		made InitializeList skip avoided folders, because LScript was attempting to load the
		default sphere scripts which I threw in 'import' to see if importing still worked.
	
	ScriptLoader.cs:
	(SL)	Made the ScriptLoader constructor add two avoided directories to allFiles, 'import' and 'imported',
		thus getting everything except the importer to ignore them.

	Imports.cs, Globals.cs:
	(SL)	Added a bool importCodeAndComments to the SteamEngine INI stuff, and added code to support including trigger
		scripts and such in imported defs. Still ignores everything except itemdefs and chardefs, though.
		That constant is off by default, by the way, since the scripts I tested it on made LScript spam bunches of
		errors (Though they were copied fine, except for some comments being omitted, and all sections except itemdef
		and chardef - which should be changed later).
	
	(SL)	About the new UberEnumerator stuff which is mentioned in the rest of my entries today:
		The main differences from tar's code and from my old Nearby* stuff:
			1) You can add and remove things from sectors while the enumerators are in use, and they will continue
				to work properly.
			2) It is simpler to make a new enumerator with different (or more) restriction on the stuff that is returned.
				(More extensible)
			3) Simpler to make a function that you can use like this: 'foreach (Item i in myCharacter.ItemsInRange(5))'
			4) More efficient.
			
	
	UberEnumerator.cs:
	(SL)	Updates and tweaks made while implementing the new enumerators in UberSectorEnumerator.cs.
	
	UberSectorEnumerator.cs:
	(SL)	New classes to replace the SectorEnumerator stuff and the Nearby* stuff.
	
	Enums.cs:
	(SL)	SectorEnumTypes added. Used by Sector with the new enumerator stuff.
	
	Thing.cs:
	(SL)	Added new methods: ThingsInRange(int range), ItemsInRange, CharsInRange, PlayersInRange, StaticsInRange,
		and DisconnectsInRange. These return the proper EnumeratorOf* objects by calling GetMap().Get*InRange(X,Y,range).

	Character.cs:
	(SL)	Removed the step on items code which used Nearby*, and replaced it with a StepOnItems method which uses
		foreach with ItemsInRange(0) instead (Still calling IsStandingOn, though).
	(SL)	Added get/set properties for each flag, etc.
	(SL)	Changed the "Ignored by Nearby* flag" to "Disconnected", which means that the Disconnects stuff in sectors
		has a use now, and so do the enum disconnects stuff. When the disconnected flag is set via Flag_Disconnect,
		it calls GetMap().Reconnect or GetMap().Disconnect as appropriate. That isn't done if the flag was already
		the same as what it was supposed to be changed to.
	(SL)	While looking for nearby* stuff, I found some things to correct. Characters could be made PCs or NPCs,
		but their account wasn't made aware of the change (if they had one). That's fixed now.
	(SL)	MakeBePlayer and MakeBeNonPlayer also call GetMap().MadePlayer or GetMap().MadeNonPlayer as appropriate
		(if the call succeeded).
	(SL)	Removed IsLoggedIn and IsLoggedOut, since they weren't used by anything except the LOS code, which
		is now checking IsMounted, since disconnected stuff won't be looked at by it anyways now (since it isn't
		enumerating disconnects) (But mounts aren't flagged as disconnected unless their rider is actually offline).
	(SL)	Characters have Trigger_LogIn and Trigger_LogOut, which are called from AttemptLogIn and LogOut, which
		are called by GameConn when a login is attempted and all else is valid, or when a connection closes or something
		tries to login a new character while one is already on. These call @login and @logout, and On_LogIn and On_LogOut.
		@login and On_LogIn are cancellable.
	(SL)	Flag_Disconnected throws a sanity check exception if an attempt is made to change it on a player, since
		that isn't safe to do. It can be set just fine on non-players, though. Character itself has a private
		flag_Disconnected property which it can use to set the flag from LogOut, and from AttemptLogIn (if the @login
		and On_LogIn triggers didn't cancel the attempt).
		
		P.S. If Flag_Disconnected was changed to allow it to be changed on a PC, then something else later
		would throw one when it detected the inconsistant state of the PC, probably when said PC tried to log in or out.
		
		P.P.S. In release or optimized builds, sanity checks aren't done, so if you toggle Flag_Disconnected,
		you'll just get a strange crash later on. But that's normal, because sanity checks are only in the debug build
		because they slow things down, and folks are expected to run in debug mode to make sure stuff works.
		
		Maybe we need a fourth build ('Sane') which does sanity checks but doesn't include debug information, etc -
		that would concievably be faster than a full debug build, while it would still point out problems
		(but not very informatively) before they could corrupt anything. Sure, if a sanity check detects a problem
		it stops the server entirely, but that's better than corrupting a worldsave. I think.
		And as slow as the debug build likes to go, I think this would be better than having people refuse
		to use the debug build because it's "causing lag."
		
	
	GameAccount.cs:
	(SL)	Accounts are informed when a character is added to their account by way of character.MakePlayer,
		and when one is removed by character's MakeNonPlayer. CheckReferences checks to make sure the account
		of each character points to this account, and also checks IsDeleted instead of checking if uid==-1.
		The new methods added for attaching or detaching a character from an account are named AttachCharacter
		and DetachCharacter. AttachCharacter won't result in duplicate entries for a character, but will silently
		return success if the character is already on the account. That's needed for the code which
		fixes my-character-forgot-their-account situations (Which shouldn't happen, but it's good still to check).
	(SL)	Made the characters array private.
		
	Item.cs:
	(SL)	Added get/set properties for each flag, and also IsVisible (IsInvisible already existed)
	(SL)	Changed the "Ignored by Nearby* flag" to "Disconnected", which means that the Disconnects stuff in sectors
		has a use now, and so do the enum disconnects stuff. When the disconnected flag is set via Flag_Disconnect,
		it calls GetMap().Reconnect or GetMap().Disconnect as appropriate. That isn't done if the flag was already
		the same as what it was supposed to be changed to.
	
	Map.cs:
	(SL)	Removed all the Get*In* methods, and changed all the Enum*In* methods to use the new enumerator stuff,
		and renamed them all to Get*In*. Marked the Nearby* methods here as obsolete. Added GetDisconnectsIn* methods.
		
		Both item and character have a disconnected flag now (changed from "Ignored by Nearby*", since disconnected
		makes more sense). Disconnected and Reconnected methods have been added which test to make sure the passed
		thing is on the ground, and if so, calls Disconnected(thing) or Reconnected(thing) on their sector.
	(SL)	Remove* and Add* have been deleted and replaced with Add(thing) and Remove(thing), in addition to the
		already-existing Disconnected and Reconnected methods, which handle changing status of something.
	(SL)	MakeBePlayer and MakeBeNonPlayer have been added here.
	
	Sector.cs:
	(SL)	Updated to work with the new UberEnumerator stuff.
	(SL)	AddThing/Player/Disconnected and RemoveThing/Player/Disconnected made private. Add(thing) and Remove(thing)
		check the thing passed to see where to put or remove it from.
	(SL)	Disconnected(thing) and Reconnected(thing) have been added. They deal with moving things from and to
		the appropriate arrayLists in Sector when they are disconnected or reconnected.
	(SL)	MakeBePlayer and MakeBeNonPlayer move things in and out of the players arraylist if requested.
	
	Server.cs:
	(SL)	Removed EnumAllPlayers, changed AllPlayersEnumerator to also implement IEnumerable and to return itself from
		GetEnumerator, changed GetAllPlayers to return a new AllPlayersEnumerator. (Before it was making a new Enumerable
		object, which is (a little) wasteful, and unnecessary) Theoretically, no new players could be added while
		this is iterating, so it doesn't have to be an UberEnumerator. But it COULD be, if desired...
	(SL)	Replaced the Nearby* stuff used for CanSee & LOS with some much prettier and more sensible code 
		(and more efficient too) which uses enumerators.
	(SL)	Changed SendNearbyStuff to use enumerators.
	
	Static.cs:
	(SL)	These have Flag_* properties now too, though they are only get properties, not get/set.
	
	SectorEnumerator.cs:
	(SL)	Marked each class in here obsolete, since it's all been replaced by the new UberSectorEnumerator.cs stuff.

	
Aug 27, 2004:
	Map.cs, Globals.cs:
	(SL)	Added MinUpdateRange and MaxUpdateRange to Globals as constants (set to 5 and 18). Removed updateRange,
		and made the enumerator stuff in Map use MaxUpdateRange (since updateRange was set to 18), for now. I need to
		look over these things more so I know what they're all for, before I set out to remove all the old Nearby*
		stuff and change everything over and fix things (since something clearly isn't working, since I never see
		in-game items except immediately after I log in, etc). 
		
	Common/UberEnumerator.cs:
	(SL)	Another general-purpose class (and one interface), this is a concept which I've been using in Planets
		for a while, and it's very useful. It basically allows nesting foreach statements and removing and adding
		elements DURING a foreach, even during nested foreaches, without screwing anything up. Of course, copying
		the list of stuff to iterate over works too, heh, but this is much more efficient.
		
		I've written plenty of comments for the UberEnumeratorHolder interface, but not yet for UberEnumerator.

	Character.cs:
	(SL)	Added Flag_Dead, IsDead, and IsAlive properties. They check the 0x0002 flag in the flags variable (Flag_Dead
		can change it too).
	
	WinConsole/AssemblyInfo.cs:
	(SL)	Put some stuff in the fields in AssemblyInfo, since they were all empty.
	
	Temporary.cs:
	(SL)	UseSkillNumberRequest, UseLastSkillRequest, UseSpellNumberRequest, UseLastSpellRequest,
		OpenDoorMacroRequest, AnimRequest, GodClientCommandRequest, UsePrimaryAbilityRequest, UseSecondaryAbilityRequest
	
	InPackets.cs, PacketHandler.cs:
	(SL)	Code for handling more packets, and for those, calling the new Temporary methods.
	(SL)	Support for the updateRange (0xc8) packet, which checks for a valid value, and then if valid, sets
		UpdateRange on the GameConn, and THAT (besides having a sanity check for valid values) triggers the sending
		of an updateRange packet back to the client to confirm their request.
		
		A visual*Enumerator (replacing * with Item, Player, etc) should be made which only enumerates stuff within
		updateRange.
	
	PacketBase.cs:
	(SL)	Made OutputPacketLog [Conditional("DEBUG")] so it won't get compiled into release builds.

	Globals.cs:
	(SL)	Added 'RunTests' command, which calls TestSuite.RunTests, which runs the tests.
	
	TestSuite.cs:
	(SL)	Basically, code which will run a bunch of tests can go here. Testing code for the compression packets
		is in here already.
	
	FastDLL.cs:
	(SL)	The fastDLL methods have been moved here from OutPackets.

Aug 26, 2004:
	Logger.cs, LogStr.cs:
	(SL)	Someone b0rked Logger's exception-writing code so it never wrote out filenames and line numbers
		for SEExceptions. After about an hour of trying to figure out WTF was wrong with it, I eventually discovered
		that all SEExceptions are turned into LogStr objects, and those are retrieved from someSEException.NiceMessage,
		which returns JUST the message (always), NEVER the stack trace or anything else, so I went and changed
		NiceMessage to return ToString() in DEBUG builds, re-ran Debug_GUI, and rejoiced when I saw a stack trace!
		
		... Now I can finally figure out why (and where!) one of my sanity checks is triggering. PLEASE don't break that
		again! *shudders* Life without stack traces is hell!
		
		(How ironic that I just spent the day coding a compression algorithm in assembly, just to beat the speed of RunUO
		1.0 RC0's compression algorithm - And it works, too. But I was using those nifty debugging tools for windows that
		MS released free, and hey, it's GREAT for working with code you wrote in assembly, lol. Plus I abused
		#define so I had variable names for each of the registers so I knew what I was using them for :P)
		
		I've also made SEBugExceptions not print in debug text. Instead, they print like a fatal error, because if
		one happens, we want people to notice, because it's important!
	
	TypeInfo.cs, Server.cs, Character.cs, Packets/OutPackets.cs, build-steamengine.bat, build-steamengine-runuo-test.bat:
	(SL)	The compile scripts and code which tests RunUO's compression script now looks for RunUO.exe instead
		of Server.exe, since the RunUO devs apparently changed the name of their EXE sometime in between Beta 36
		and 1.0 RC0.
	(SL)	Further work has been done on compression, because (Gasp!) RunUO 1.0 RC0's compression method was faster
		than my best one (Compress5). Not being content with merely matching their speed, or barely passing them,
		I spent most of today working on a new compression algorithm, written entirely in assembly (except
		the function definitions and such), compiled with MS's C++ compiler. That is all in the fastdll folder,
		and it is compiled separately from everything else (With distrib/build-fastdll.bat). If you don't compile it
		or get the DLLs (bin/fastdll.dll, bin/Debug_fastdll.dll) from someone else, then SE will be compiled to use
		Compress5, and would have no knowledge of fastdll - This is primarily for non-Windows compatibility, since they
		might not be able to compile the DLL, and might not be able to use P/Invoke in C# to call functions in it.
		But if you have the fastdll DLLs in your bin folder when you compile SE, the build-steamengine script (and
		build-steamengine-runuo-test) will notice them, and will define USEFASTDLL, which will compile in the fastdll
		support and will compile all the code which does compressing to use the fastest compression method in the FastDLL,
		instead of Compress5.
		
		By the way, the compression methods in FastDLL are named "Crushify" instead of "Compress" - It's a good way
		to set them apart from the compression methods in OutPackets, plus, it accurately describes what they do
		to RunUO's compression method - Well, as long as nobody fires a missile at FastDLL which pierces its 
		gargantuan battle armor and exposes its tiny helpless body. Er, wait, wrong game.
	
	fastdll/fastdll.cpp, fastdll.def, fastdll.dupe, fastdll.hpp:
		Crushify functions.
	
--------------------------------------------------------------------------------------------------------------------------
Apparently this file somehow got screwed up on CVS - there were some >>>>>>>s and <<<<<<<s in it and such,
and CVS didn't want it back. Well, I've changed the >>>>>>>s to ))))))) and <<<<<<< to (((((((, and there was one =======
too, and I changed that to |||||||, without deleting anything, so maybe whoever (accidentally, I hope :P)
caused it can figure out WTF happened and fix it from a backup, perhaps. I don't have a backup,
personally, so I can't. -SL
I think I fixed it... and if not, well, after all it's just changes.txt, nothing too important :) -tar

Aug 25, 2004:
	scripts/defaults/commandPLevels.js:
		Changed to use instanceof for checking the type of stuff.

	Packets/OutPackets.cs, Packets/InPackets.cs, Packets/PacketHandler.cs, scripts/defualts/versiontest.js:
	(SL)	Trying to figure out the 0x3e and 0x4b packets. No such luck so far, but I've written some comments
		before OutPackets' SendVersions method.

	Server.cs:
	(SL)	AllPlayersEnumerator was skipping player # 0; fixed.

	WinMain/WinConsole.cs, WinMain/WinForm.cs, WinMain/WinMain.cs, Server.cs, Main.cs, Commands.cs, TypeInfo.cs:
	(SL)	Since the server froze and needed to be killed and restarted every time it failed recompiling scripts,
		I added a new RunLevel, RunLevels.AwaitingRetry, and made it be used if recompiling scripts fails.
		In that case, the WinConsole will look like a running console (It could later be made to have most menu
		items disabled, except resync and recompile). Also, it doesn't sit in an endless loop anymore, heh - 
		That was making it hard to unpause it (:P). The main loop continues, but nothing is run except for
		HandleNativeCmds and Server.Cycle, but Server.Cycle will only listen to and accept console connections
		while in this state (That's so that if someone was resyncing with a remote WinConsole, they won't get
		locked out when it fails). The only commands that are accepted are 'resync' and 'recompile', and
		when either one of them is run, it will attempt to retry the recompilation, and if it works, it will
		restore stuff. If it fails, it reports so and goes back to waiting for another retry attempt.
		
		I haven't done changed the behavior of script compilation at startup, which still kills SE if it fails.
		Of course, it'd be nice to see that change to something like this too, but it's not really necessary - 
		
		Long story short, I wound up doing this because I was trying to make a simple script to help me
		test a particular packet, which I wanted to be able to recompile without having to shut down and restart
		SE and log back in every time! Of course, the recompilation kept failing and so I had to restart SE anyhow.
		So, as you can imagine, after about a dozen times, I got annoyed enough to set about fixing the problem.

	dists/build-steamengine.bat:
	(SL)	After MUCH looking around, I eventually discovered the cause of these (semi-rare) errors:
		C:\rich\programming\se-devpack\steamengine\scripts\defaults\CommandPLevels.js(21,38) : error JS0013: Type mismatch
		C:\rich\programming\se-devpack\steamengine\scripts\defaults\CommandPLevels.js(23,39) : error JS0013: Type mismatch
		It was that Debug_SteamEngine, when compiling scripts, was attempting to have scripts reference Common.dll instead
		of Debug_Common.dll, and THAT was happening because build-steamengine.bat wasn't including /d:DEBUG when compiling
		Debug_SteamEngine, but it WAS using Debug_Common.dll, so voila, a type mismatch for anything in Common being
		referred to by scripts! Note that I also made sure it wouldn't happen when the GUI recompiled SE.

	TypeInfo.cs:
	(SL)	Code to support debug-optimized builds (I mean ones which are both debug and optimized).
		WinConsole/WinMain.cs, WinConsole/SteamConsole.cs:
	(SL)	Code to support debug-optimized builds (I mean ones which are both debug and optimized), and better support
		for the RUO builds.
	
	WinMain/SteamConsole.cs:
	(SL)	I've applied the compile-options and such from build-steamengine.bat to the compiling code here
		I've also fixed it so that recompiled SE builds made by a GUI EXE will in have their proper icon.
		I had hoped applying the proper compile-options and such, and double-checking the references, would
		eliminate the annoying type mismatch compile error that JSC was giving, but I don't think it did.
	
	Enums.cs:
	(SL)	Moved DeleteRequestReturnValue here (from OutPackets).

	Logger.cs:
	(SL)	Uncommented the code in WriteDebug(object data). I don't know why it got commented out, but whoever did
		that killed all my debug messages and dumps of packet contents, etc.

	Changed everything that said "JS#" to "JScript" because that is what jsc (the compiler) calls it. Actually,
	it calls it "JScript .NET," but I didn't add the ".NET" because we don't say "C# .NET" or "VB .NET" either.
	Searches for "JScript" in MS help docs will be more productive than searches for "JS#". :P
	
	See: ms-help://MS.NETFrameworkSDKv1.1/jscriptnet/html/jsoriJScript.htm (If you have the framework sdk docs installed
	- I don't have the MSDN URL, but it's in ".NET Framework SDK"->"Compiler and Language Reference"->"JScript")
	

Aug 24, 2004:
	Character.cs:
	(SL)	Changed CompressionTest to use the new names of Compress algorithms 1 and 5, and to note that Compress5
		is "(Compress now)".
	(SL)	Added code encased in '#if TESTRUNUO' blocks which includes 
		RunUO's Server.Network.Compression.Compress method in the tests in TestCompression.
		
		To compile SE so that you can use that, you have to do two things:
			(1) Copy Server.exe and zlib.dll into the Steamengine folder (where GUI.exe gets built, etc)
			(2) Go into SteamEngine/distrib, and run build-steamengine-runuo-test.bat.
		You'll now have a GUI_RUO.exe in the main SteamEngine folder, and SteamEngine_RUO.exe in bin.
		Run GUI_RUO.exe to get the winconsole. From here, everything works just like with GUI.exe, except that
		if you use the testCompression command in-game, then RunUO's compression method will be tested
		and included in the results. You can also use GUI_O_RUO instead to see the effect of optimizations on the speeds
		of the various compression functions.
		
		(GUI_RUO.exe will compile SteamEngine_RUO.exe if it needs to, same for GUI_O_RUO and SteamEngine_Optimized.)
	
	distrib/build-steamengine-runuo-test.bat:
	(SL)	Added. Compiles SteamEngine_RUO.exe and GUI_RUO.exe, and optimized versions thereof whose names end with
		O_RUO instead of RUO. This will only work if Server.exe exists in the main SteamEngine folder, and you'll
		need the zlib.dll from RunUO to be there too, if you actually want to be able to do anything with this.
		
		Those new EXEs include RunUO's Server.exe in their references, and can call (public) methods in it. Specifically,
		the TestCompression command calls RunUO's Server.Network.Compression.Compress method, to compare the speed
		of it to ours. See my changes for today for Character.cs (which is where TestCompression is defined).
	
	WinConsole/SteamConsole.cs:
	(SL)	Added #if/elif/etc for OPTIMIZED and TESTRUNUO to make recompiling SteamEngine_Optimized and SteamEngine_RUO
		and SteamEngine_O_RUO work fine. Note that _RUO is for a special use, and is compiled separately if you want
		it compiled at all.
	
	WinConsole/WinMain.cs:
	(SL)	Added #if/elif/etc for OPTIMIZED and TESTRUNUO to make GUI_Optimized, GUI_RUO, and GUI_O_RUO, able to run
		the correct EXE, respectively: SteamEngine_Optimized, SteamEngine_RUO, and SteamEngine_O_RUO.
		Note that _RUO is for a special use, and is compiled separately if you want it compiled at all.
	
	TypeInfo.cs:
	(SL)	Added code to handle compiling scripts for the optimized build. It seems to work so far, though the JS
		compiler doesn't have a /o+ option!
	
	OutPackets.cs:
	(SL)	Renamed Compress to Compress1, and then renamed Compress5 to Compress so it would be used by all
		the stuff which has to do compression (except the compression testing code).
	
	PacketHandler.cs:
	(SL)	HandleAttack called for 0x05.
	
	InPackets.cs:
	(SL)	HandleAttack added.
	
	Temporary.cs:
	(SL)	Added AttackRequest, called from InPackets when a client requests to attack someone.
	(SL)	Added MakeNewArea, called from InPackets (by the God Client).
	(SL)	Added AskScriptsPermissionToDeleteCharacter, called from InPackets when a client requests to delete someone.
		That is only called if the character really exists, mind you.
		
	Exceptions.cs:
	(SL)	SEException's parent class changed to ApplicationException (was Exception). Microsoft recommends using
		ApplicationException instead of Exception as the base class for exceptions which aren't thrown by .NET itself.
	(SL)	SanityCheckException added, which is what the Sanity class throws.
	
	Common/Sanity.cs:
	(SL)	Sanity.IfTrueSay prints an error message now, instead of throwing an exception.
	(SL)	Sanity.IfTrueThrow throws a SanityCheckException - which behaves similar to a SEBugException if it isn't
		caught by the code which runs scripts (They DO catch exceptions, right?).
	
	Main.cs:
	(SL)	SteamMain catches and treats SanityCheckException like SEBugException.
	
	Logger.cs:
	(SL)	Logger() catches and treats SanityCheckException like SEBugException.
	
	Globals.cs:
	(SL)	Globals() catches and treats SanityCheckException like SEBugException.
	
	
	scripts/defaults/CommandPLevels.js:
	(SL)	Changed 'conserol' in a comment to 'counselor', changed "Not privileged to use command"
		to "Not privileged enough to use that command" and "Not privileged to use command '"+command+"'"
		to 'Not privileged enough to use the command '"+command+"'"
	
	distrib/build-common.bat:
	(SL)	An optimized DLL is built now, Optimized_Common.dll. It's used by the new Optimized_SteamEngine.exe and
		Optimized_GUI.exe.
	
	distrib/build-console.bat:
	(SL)	An optimized GUI is built now, Optimized_GUI.exe. It runs Optimized_SteamEngine.exe, and uses
		Optimized_Common.dll. It's named Optimized_GUI more because it uses Optimized_SteamEngine.exe and
		Optimized_Common.dll than because it itself was compiled with optimizations on.
	
	distrib/build-steamengine:
	(SL)	An optimized EXE is built now, named Optimized_SteamEngine.exe (for now).
		IMO we shouldn't replace SteamEngine.exe with it just yet, not until we're sure it won't have bizarre bugs
		or anything (which has happened to me with other programs when I turned on optimizating, but I doubt
		it will happen here).
	(SL)	(Apparently someone else fixed this before I got my fix merged in and onto CVS :P) The debug EXE now uses
		Debug_Common.dll instead of Common.dll.
	
	Debug_GUI.bat:
	(SL)	Added code that, if you have python installed in c:\python23, will run a Python script (rebuildIfNeeded.py)
		which will rebuild common and/or console if, and only if, needed. If you don't have Python there, then it
		falls back to the code which compiles them both every time before running Debug_GUI.exe.
	(SL)	Added a pause statement at the end of this file, because SE apparently has a tendency to exit
		completely if it crashes (at present).
	
	Optimized_GUI.bat:
	(SL)	Created. Similar to GUI.bat, but runs Optimized_GUI.exe. The Optimized builds are an experiment - They
		may or may not give better performance, it depends how good the compiler is at optimizing, and whether
		it slows down already-extensively-optimized code, like Compress.
	
	GUI.bat:
	(SL)	Added code that, if you have python installed in c:\python23, will run a Python script (rebuildIfNeeded.py)
		which will rebuild common and/or console if, and only if, needed. If you don't have Python there, then it
		falls back to the code which compiles them both every time before running GUI.exe.
	(SL)	Made the console window *not* stay open after starting GUI.
	
	distrib/rebuildIfNeeded.py:
	(SL)	Created to determine whether common or console need to be rebuilt, and if so, to rebuild them by
		calling distrib/build-common.bat and/or distrib/build-console.bat. It checks whether any of the output files
		are missing (if so it rebuilds), and if not, whether any source files are newer (if so it rebuilds). It checks
		common and console separately. It can also be easily extended to work with any new modules that are added
		later, and to continue working if new output files are added to a project, or if the output folder or the
		module's folder have been renamed or moved, etc.
	
	Thing.cs:
	(SL)	Added a comment to Dupe(numTimes).

	Item.cs:
	(SL)	Added a comment to Dupe().

	Character.cs:
	(SL)	Added a comment to Dupe().
	(SL)	Added comments to a number of methods.
	(SL)	Added some precondition-checks to a number of methods.

	Server.cs:
	(SL)	Deleted the code that iwan commented out, and replaced it with my fixed code from Aug 18
		(Which wasn't on CVS yet - of course, at the time Iwan commented it out (Aug 17), I hadn't
		written the fix yet). Iwan wrote:
		>	Server.cs
		>	(iwan) some code commented (function Init(), lines 374-385), I don't know
		>		what this code should do, but I know, that it throws exception:)
		>		(I just needed server running, not necessary ready for connections)
		Assuming it was the same problem (the exception should have actually been from the block of code
		that iwan didn't comment out, not the one he did), then the problem was (at least here) that if CalcLocalIPs
		returned the loopback IP (due to .NET's AddressList property returning it when there are no other local IPs),
		then later on when Init tried to make TcpListeners on it, it would fail because they already existed.

Aug 23, 2004:
	(SL)	docs/statistical-tests.txt created
	(SL)	docs/testresults/compression.txt created

Aug 22, 2004
	Common/ConAttrs.cs
	(iwan)	Some redundant log styles removed

	WinConsole
	(iwan)	InvariantCulture is used in WinConsole, so configuration file works fine

	build stuff
	(iwan)	build system changed: every build stuff concentrated to 'distrib' directory and updated;
		added './distrib/clean.bat' to remove all files produced by build process;
		MS Visual Studio .NET project files added (only debug versions);
		assembly files './gui.exe' and './bin/common.dll' removed and
		'./gui.bat' ('./debug_gui.bat') added
	(iwan)	debugBuild replaced with more common DEBUG

	AssemblyInfo.cs:
	(SL)	Changed AssemblyCopyright from "2002-2003 Richard Dillingham" to "2002-2004 Richard Dillingham and contributors"
		which is what it ought to say.

Aug 21, 2004:
	InPackets.cs:
	(SL)	Optimized DecodeInt, DecodeUInt, DecodeShort, DecodeUShort, and DecodeSByte.
	(SL)	Made HandleLanguagePacket check blockSize before reading, because some clients send 9-byte
		language packets, and some send 8-byte language packets. So now it should work with all of them.
	
	PacketBase.cs:
	(SL)	Optimized EncodeIntInArray, EncodeUIntInArray, EncodeShortInArray, EncodeUShortInArray, EncodeSByteInArray.

	Packet.cs:
	(SL)	Methods for testing the performance of new compression code side-by-side with existing compression code.
	
	PacketBuffer.cs:
	(SL)	Methods for testing the performance of new compression code side-by-side with existing compression code.
	
	OutPackets.cs:
	(SL)	Added singlePacketSize for ReallySendOnePackMultipleTimes and such, rather than using element 0 of the
		array groups stuff.
		
	GameConn.cs:
	(SL)	Methods for testing the performance of new compression code side-by-side with existing compression code.
	
	SimulConn.cs:
	(SL)	A new file, which simulates a GameConn, without actually sending any data anywhere. Why? Because 
		trying to send boatloads of test packet data to a single GameConn just makes the client crash.
		
	UIDArray.cs:
	(SL)	All I did here was change "GNU internal license" to "GNU public license". Hee.
	
	Character.cs:
	(SL)	Added an EchoMessage method (for the testing code) which writes something to the character's conn
		(if it exists) as well as to the console (using Console.WriteLine for now, rather than Logger.WriteDebug,
		because I wanted to do the test results with the release version rather than the debug version of SE), as well
		as TestRemoveFromView, TestDecode (now deleted), and TestEncode (also now deleted). TestRemoveFromView
		compares various things, and contains the most advanced automated testing code (as opposed to TestCompression,
		which contains very simple testing code (I should update it)).
	
Aug 20, 2004 (and Aug 21 after midnight...):
	Temporary.cs:
	(SL)	This is a new file, which holds methods that are called by various new packet handling methods, so I can add
		a bunch of packet handling methods without having to implement systems to back them ATM. Thus the packets
		can get done and someone else can handle the implementation later. Comments at the beginning of Temporary.cs
		explain in more detail.

	StaticSector.cs:
	(SL)	Added DeleteStatic. Tested and debugged DeleteStatic, AddNewStatic.
	
	SectorEnumerator.cs:
	(SL)	The constructor for SectorEnumerator now calls Crop on its rectangle before continuing.
		Now it shouldn't cause a crash if you go near the edge of the map (I did not actually test to see if
		it crashed, but there was nothing there to stop it from trying to read outside the map array bounds,
		so it certainly would have. This is one of those things which rarely gets tested during development
		but sooner or later causes crashes on real shards, and hey, if a player can sail to the edge of the map
		and cause the shard to crash, that's a Bad Thing).
	
	Map.cs:
	(SL)	Added a couple WriteDebug lines which are now commented out. Tested and debugged
		sectorFactor values of 3 and 4 until both worked properly. Initial tests indicated that 4 was buggy, including
		some of my new code as well, but 3 worked properly - after testing the functions with 3, I set about finding
		the bugs in 4 and fixing them. Most of the problems were caused by code calling the wrong
		Get*Num[X/Y]Sectors functions, and most of them existed before my changes, since they were using the existing
		functions when they shouldn't have been, which was the fault of the function names, IMO, because said functions
		were too unclear about what they did. Also added comments before those functions to (hopefully) make it clearer
		which ones are for what.
	
	Rectangle.cs:
	(SL)	Crop method added to Rectangle2D. It makes sure the coordinates are >=min and <=max coordinates, and
		changes them if they aren't. This is used in SectorEnumerator to make sure we don't try to look off the map for
		stuff. It may need to be used elsewhere, but I haven't looked.

	InPackets.cs and PacketHandler.cs:
	(SL)	Added HandleGodClientNewAreaRequest for packet 0x58, which calls a Temporary method (See Temporary.cs).

	OutPackets.cs:
	(SL)	Tested and debugged SendUpdateStaticsTo.
	(SL)	DoneWithPacketGroups won't print debug messages if there are no grouped packets (which is the case if the groups were already emptied with that method, or by ReallySendPacks).
	(SL)	Added comments to DoneWithPacketGroups, (oops, I got distracted by missing HasPaperdollOpen, CanSeePlayer, and HasStatusBarOpen, and so on. Will get back to this later... It's thundering. Again.)
	(SL)	Wrote a new Compress method to replace pack. Changed the other pack methods and everything that calls pack
		to use Compress instead. Tested and debugged Compress. Wrote a speed-test to compare the speed of Compress versus
		the speed of pack. Tested the test. Ran the test several times. Noted the cycles per run varied wildly. Set UO
		to below average priority, and SE to above average. Ran the test several more times. Noted the cycles per run
		tended to stay steady for the most part now. Restarted UO and SE, set priorities again as before, 
		ran the test 10 times, recorded the results, and analyzed them, and determined that Compress was indeed
		faster then Pack, and that its speed gain did not appear to be dependant on packet size (packet comprssion tests).
		
		Besides, I meant to get rid of Pack before I ever made SE, because I had copied it from Tupi, which was GPLed,
		but since I forgot about it, I was in violation of the GPL. Oops. Anyways, if the code here is in fact GPLed now,
		then nobody's in violation of the GPL, but if it is not then Pack needs to get deleted. AFAIK that's the only
		GPLed code, though tar may have brought in some (perhaps that's why it changed...).
	
	Server.cs:
	(SL)	Added CommaizeAmount method, which does what was previously done directly in Item's GetName method.
		Note that the TestCompression method in OutPackets calls CommaizeAmount (that's why I moved it).
		It can go somewhere else if someone can think of a better place for it, or I can move it to OutPackets solely
		for TestCompression, and put the original code back in Item again. Or it can stay here...
	
	Item.cs:
	(SL)	Calls Server.CommaizeAmount to commaize the amount now.

	Common/HighPerformanceTimer.cs:
	(SL)	Added for TestCompression in OutPackets.
	
	Common/Sanity.cs:
	(SL)	Added for HighPerformanceTimer in OutPackets.
	
	Character.cs:
	(SL)	Added a 'TestCompression' method (which is thus a command).
		It can be deleted later, if 'pack' gets deleted from OutPackets, or after tar gets to try TestCompression,
		or whatever.
	

Aug 19, 2004:
	OutPackets.cs:
	(SL)	0x1B (Login Confirm) now sends map width & height properly (needed for the god client, according to Kair's site).
	(SL)	SendGodMode and SendHackMove methods added.
	(SL)	SendUpdateStaticsTo added.
	
	InPackets.cs:
	(SL)	0x04 (God Mode Request) now supported, checks account privs, and activates or deactivates god mode as requested if privs are sufficient.
	(SL)	HandleGodModeRequest and HandleWarModeChange now use SuspiciousError when appropriate (other methods haven't been changed to use it yet).
	(SL)	Moved a couple packets around which were out of order, but there were a lot more that I didn't touch because I wanted to get back to working on god-client support.
	(SL)	HandleGodClientEditRequest added. Currently, Add Static Item, Add Dynamic Item, and Hack Mover on/off are supported. Add NPC is not implemented yet (and may remain unimplemented).
	(SL)	Support added for alternateCommandPrefix (Because the GC eats '.' commands) - defaults to '[', which will be nice for folks used to RunUO.
	(SL)	HandleUse, for 0x12, has been added but does nothing but read the packet size and silently ignore the packet, for now. (The god client was sending special commands with 0x12 on startup, and I wanted it ignored so I could see the boatloads of 0x34 packets it was sending afterwards)
	(SL)	HandleGodClientDeleteStaticRequest, for 0x61, has been added and tested.
	
	StaticSector.cs:
	(SL)	Added AddNewStatic and SendUpdatesTo methods for god-client support.
	
	PacketHandler.cs:
	(SL)	0x04 (God Mode Request) handled by HandleGodModeRequest in InPackets.
	(SL)	0x4b ("Check Ver" (obsolete according to Kair's packet guide)) is silently discarded & ignored.
	(SL)	0x0A (God Client Edit Request) handled by HandleGodClientEditRequest in InPackets.
	(SL)	0x12 calls HandleUse, which does nothing but read the packet size and silently ignore the packet, for now.
	(SL)	0x61 handled by HandleGodClientDeleteStaticRequest in InPackets.
	
	Globals.cs:
	(SL)	pLevelForGodMode added for INI settings. It defaults to 5.
	(SL)	kickOnSuspiciousError added for INI settings. It defaults to true.
	(SL)	alternateCommandPrefix added. It defaults to '[', which is RunUO's default command prefix.
		This primarily exists because '.' is used by the God Client for internal client commands
		(i.e. if you type a command with '.' in the God Client, it won't be sent to the server),
		but it should also be convenient for shards with staff with different UO XSS backgrounds.
		(I used '[' because RunUO is arguably the most popular UO XSS in existance).
	
	Logger.cs:
	(SL)	Added SuspiciousError(conn,txt) methods, which check kickOnSuspiciousErrors and either kick
		and print a warning, or print an error (depending on the value of kickOnSuspiciousErrors).
	
	GameConn.cs:
	(SL)	Added godMode variable and GodMode property for accessing it (Setting the GodMode property causes
		the server to call SendGodMode after changing godMode).
	(SL)	Added HackMove & hackMove, which work like GodMode & godMode.
	
	Character.cs:
	(SL)	Fixed WalkRunOrFly so that plevel properly allows walking anywhere, and so does HackMove
		(in case you are on a god client and then drop your plevel temporarily - hackmove will still be usable,
		even if walk-anywhere normally wouldn't be because of your now-dropped plevel).
	
	Map.cs:
	(SL)	GetMapNumXSectors and GetMapNumYSectors were renamed to GetMulNumXSectors and GetMulNumYSectors, to better
		reflect the fact that they return the number of x/y sectors in the map *mul* file, not the number of sectors
		SE knows of internally (since SE's sectors may be different sizes).
		New GetMapNumXSectors and GetMapNumYSectors methods have been added, though, which DO return the number
		of sectors SE knows of internally. Why? Because StaticSectors.cs was calling these to figure out how
		many StaticSectors to allocate, and it was allocating more than it needed because it was getting
		the # of mul sectors instead of SE map sectors.
		GetMulNumYSectors is (now) used by SendUpdateStaticsTo in OutPackets, by the way.
	
	Static.cs:
	(SL)	'm' was not being set in the constructor. Now it is.
	
Aug 18, 2004:
	Server.cs:
	(SL)	No longer crashes if CalcLocalIPs includes the loopback IP addy in the list it returns.
	
Aug 17, 2004
	WinConsole
	(iwan)	SEWinConsole namespace renamed to SteamClients
	(iwan)	cofigTemplate renamed to App.config (good for VS.NET)
	(iwan)	Configuration file support added to console.

	Globals.cs
	(iwan)	added 'logout' command

	common/IniHandler.cs
	(iwan)	IniHandler.WriteFile method is public now; bug in IniHandler.SetValue method fixed

	WinConsole/WinMain.cs, WinConsole/Launcher.cs, src/Main.cs, common/Common.cs
	(iwan)	Console rewritten, native console runs server in separated thread,
		Steamengine has several runlevels (Runnig, Startup,...);
		use SteamEngine.Main.RunLevel property to obtain servers runlevel

	TypeInfo.cs
	(iwan)	Added referenced assembly "common.dll"

	ConvertTools.cs, TagMath.cs
	(iwan)	TagMath class is binded to SE code, but there were some generally usefull methods
		(and essential for IniHandler) - added ConvertTools class to Common namespace and some methods
		moved from TagMath.cs to ConvertTools.cs (TagMath is inherited form ConvertTools now)

	IniHandler.cs, SEIniHandler.cs
	(iwan)	class IniHandler generalized and moved to Common namespace, specific Steamengine code moved
		to SEIniHandler class

	Server.cs
	(iwan) some code commented (function Init(), lines 374-385), I don't know
		what this code should do, but I know, that it throws exception:)
		(I just needed server running, not necessary ready for connections)

July 22, 2004
	Logger.cs, LogStr.cs, Conn.cs, ./Common/, ./WinConsole/
	(iwan)	Colored console log messages, colors can be configured, but cannot be saved (yet)
	
	Globals.cs
	(iwan)	Added 'contest' command

	./changes.txt
	(iwan) TODOs separated from changes.txt (to file 'TODO')

June 27, 2004
	RemoteConsole.cs -> ConsConn.cs, GameCons.cs
	(tar)		Created proper separate files for Conn, ConsConn, and GameCon
	
	Packet.cs
	(tar)		Created a new abstract base class, Packet. I am going to redo all the packet sending stuff to use this class, 
		i.e. to have packets as separate class instances. 
		First test (with RemoveFromView) using this paradigm was successful :)
		
	Sever.cs, GameAcount.cs
	(tar)		Partly rewritten the code of Server to use a structure I like more :)
		GameAccount now has an IsOnline bool property.
	

June 20, 2004
	Coords.cs -> Point.cs
	(tar)		Made Point2D, -3D, -4D, -5D classes, and according interfaces. The IPoint5D interface is implemented by 
		Thing and Static and as such is used for computing of LOS, etc.

June 3, 2004
	Constant.cs, OpNode_Script.cs, LScriptHolder.cs
	(tar)		Added the Constant class. It implements the functionality of [defname(s) xxx] in sphere.
		PeriodicSave.cs functionality moved to LScript file PeriodicSave.scp, using the constants.

May 31, 2004
	/Timers, /LScript - *_AddTimer.cs, etc.
	(tar)		Implemented the AddTimer "keyword" of LScript, added syntax for TriggerKey and TimerKey (same syntax as in save)
		fixed some found bugs in FunctionTimer and TriggerTimer, and added formatString to them.

May 23, 2004
	/Timers - FunctionTimer.cs, MethodTimer.cs
	(tar)		Implemented the FunctionTimer and MethodTimer classes. Also removed public AddTimer methods from TagHolder.
		The right way to start a timer is to construct it with it`s public constructor and then .Enqueue() it.

May 23, 2004
	/Timers , MainClass.cs, Tagholder, etc.
	(tar)		Moved timers into new directory/namespace, and rewritten them.
		There is now a separate thread, in which the timers are being enqueued to and dequeued from a single priority queue.
		(priority queue = binary heap, a special collection algorhitm which keeps the least/most prioritized object 
		on the top.)
		Timer class itself made public, it should be now safe, hopefully. So now from script you can change it`s delay time
		and/or remove it.

May 22, 2004
	(tar)		Created a new class, ScriptFilesCollection, which handles the (recursive) finding of given script files, 
		and remembers them, so that it can later say if/what for files have changed. 
		It is used by both TypeInfo and ScriptLoader classes (i.e. for both compiled and interpreted scripts)
	Globals.cs
	(tar)		Created 2 new options in .ini, debugCompiling and strictCompiling. (debugging info, trating warnings as errors)
	MainClass.cs, TypeInfo.cs, Thing.cs, and around
	(tar)		Made the compiled scripts reloadable, hopefully. Timers seem somehow broken, which is not very catastrophic,
		since they are next to rewrite.

May 21, 2004
	(mike)	XML documentation generator DLL added
	(tar)		Added copyright notices to all files.
	TagHolder.cs and it`s descendants
	(tar)		There is now Trigger() and TryTrigger(), CancellableTrigger() and TryCancellableTrigger().
		The try- versions are basically internal to core, and are catching exceptions from particular triggers, 
		while the public versions would let an exception go through. (Try)Trigger does not return any value anymore, 
		(Try)CancellableTrigger returns when it first comes along a trigger that returns 1.
		These methods are also now virtual, so that every class handles it`s own specialties 
		(like Thing runs also triggers from its defs, all of them can have "global events")
	Creature.cs -> Character.cs
	(tar)		Renamed Creature to Character. I consider that word to better express the fact that it can be both
		A NPC and a PC. And besides, Character is the word that is being used in sphere, and referenced
		in the class name "CharDef".
	Allcharacters.scp
	(tar)		A new script file, for now it contains one event (e_allcharacters) with trigger @newPC, i.e. the one which
		starts a new player character (it just equips shirt and pants). It`s the first >useful< LScript instance! :)


May 20, 2004
	Thingdefs and around
	(tar)		rewriting stuff to use new FieldValue class. I.e. every ThingDef field value is in fact a 
		|current value| - |default value| pair.
	
	TagHolder.cs, TriggerGroup.cs, ...
	(tar)		Timers and Tags are now stored in one Hashtable inside TagHolder. Triggergroups are stored in a simple
		linked list, instead of hashtable. 


May 16, 2004
	/winconsole, MainClass.cs
	(tar)		Changed a bit the way SE is launched... now you can run it right out of the cvs. 
		There is a binary of the windows console now in the steamengine root of CVS. It`s now called (Debug_)GUI.exe
		When this binary is run right there, it compiles the /src directroy as the core, loads it and runs it. 
		Steamengine.exe is now typically in /bin directory, though it can be moved to .. and run as textual console app.
		I have also given away the NT service support... i dont like it.

	(tar) renamed Account class to GameAccount class. It`s because when you do something.account in LScript, 
		it could resolve it as reference to the class (i.e. to static members, etc.). This seemed to be the most easy fix.
		
	(tar)		Changedthe way ThingDefs are loading additional attributes. Now they load such fields/properties which you
		mark on the given Thing with Attribute [LoadFromDefs]. The thingdef does not initialize the fields/properties to the given
		value, it just stores them in a special class instances along with their default value.

May 14, 2004
	/LScript, ScriptLoader.cs, ScriptFileInfo.cs and others
	(tar)		LScript considered finished for now.
		Began working on script resyncing stuff.


May 8, 2004
	/LScript
	(tar)		Most of the work on operators is done. What is left are only unary operators.

May 7, 2004
	/Spherescript -> /Lscript
	(tar)		Renamed SphereScript to LScript ("LazyScript"), renamed associated classes, files, etc.
		SphereArgs is now Scriptargs
		I hopefully finished indices handling in LScript.

Mar 30, 2004
	/Spherescript, /bin
	(tar)		Work on spherescript in progress. Added xx new .cs files to Spherescript directory. Also included source of Grammatica runtime to the core, 
		and added grammatica.jar (the parser generator) to bin directory.
		So far, the interpreter is able to build parser tree and "compile" out of it the basic (lazy) OpNodes. More later.


Mar 9, 2004
	(tar)		A lot has changed, and a lot is now going to change. Shadowlord quitted the project, which has quite some impact
		on the project... Now it is more or less entirely on me. At first it means that I will omit the parts of code which 
		I do not (want to) understand or which do not have sense or which are bad, ineffective or something.
	File changes:
	added
		AbstractKey.cs
		TriggerTimer.cs
		TimerKey.cs
		FunctionTimer.cs
		MethodTimer.cs
		ScriptLoader.cs
		ScriptFileInfo.cs
		Spherescript\SphereScriptHolder.cs
		SphereScript\Generated*.cs
		
	renamed
		Triggerdef.cs -> TriggerKey.cs
		Effect.cs -> Timer.cs
		TagDef.cs -> TagKey.cs
		FunctionDef.cs -> FunctionKey.cs
		ScriptDef.cs -> ScriptHolder.cs
		
	deleted
		TagDefs.cs
		ScriptDefs.cs
		
		
		
		TagDef is now TagKey. TagDefs exists is no more, and the weird code around bounded tags is deleted 
			(I never understood it`s sense...I simply dont think this functionality belongs to tagdef, which is nothing more than a key)
			There is now an AbstractKey class, from which derive all the classes that are used as keys 
			(TriggerKey, FunctionKey, TimerKey), which are also removed to -Key
		
		Effect is now an abstract class, from which derive following classes: TriggerEffect(former Effect, fires triggers), 
			FunctionEffect(fires scripted functions) and MethodEffect(fires a MethodWrapper).
			Effects are as much as possible maintained within the Effect class now, i.e. no more in Server, Main, etc.
			the main effect array is now no more an ArrayList, it is a linked list (similarly to Items in containers).
	
		PScript is not being developed anymore. I will rather begin to develop SphereScript parser&compiler directly, without
			translation to PScript. But it is possible that it will be able to convert the scripts to Spherescript of different versions, or even C#.

Jan 27, 2004
	Item.cs
	(tar)		@step "normalized"
	Commands.cs
	(tar)		Commands improved. They now try to call a static member if they do not find an instance member, and they differ between 
			Errmessage "No such function" and "Bad arguments for that function". In case of bad arguments for soe "hardcoded" member, 
			it does not try to run CallFunc(i.e. it does not run scripted functions).
	Commands.cs, MainClass.cs, Server.cs, Globals.cs, and all classes which pointed to ini settings in MainClas
	(tar)		class GlobalCommands, values from MainClass stored in .ini, and Server.globals unified in one class - Globals. 
			It is descended from TagHolder, though it mostly differs only in the static functions that were previously in GlobalCommands and MainClass

Jan 26, 2004
	TypeInfo.cs, Thingdef.cs, Itemde.cs, Chardef.cs, Thing.cs, ...
	(tar)		Created a new class - TypeInfo. It serves I) for encapsulating of the script compiling procedures (moved from MainClass)
			and II) for storing info about Thing classes and it`s descendants (scripted or not). Currently, "info" means it provides constructors, 
			which are used in Thingdef and Thing when loading - these classes were previously searching the constructors themselves directly via reflection.
			The TypeInfo class also checks if the class has what it should have... currently it means copying constructor and Dupe method, in the future it may do more.

Jan 24, 2004
	Thing.cs, Itemdef.cs, Chardef.cs
	(tar)		Added trigger @create

Jan 23, 2004
	Thing and subclasses, InPackets.cs
	(tar)		Added triggers @pickup_pack, @pickup_ground, @destroy (called just before BeingDeleted), 
			@equip, @unequip

Jan 22, 2004:
	PathFinder.cs, Map.cs, Coords.cs:
	(beho)	PathFinder is in but more testing and edits need to be done. It uses A* algorithm with BinaryHeap. Overloaded 
	        operators == and != added to Coords because of PathFinder puposes. Overloaded Map.IsWalkable (modification 
	        without Creature parameter).


Jan 21, 2004:
	Thing.cs, Creature.cs:
	(SL)	Improved Moved, Update, UpdateX, Go, and methods which use them. MovedALot no longer exists. Creature has
			MovedSlightly for when the creature moves, walks, or runs.
	(SL)	Added newnpc as an alias for newchar.
	(SL)	Added more naturaldocs comments.
	(SL)	Fixed IsLoggedIn for NPCs and added IsMounted.
	TagHolder.cs:
	(SL)	Fixed CallFunc(ParsedCommand) so it doesn't die when the scripted function it's looking for doesn't exist.
			Now it'll throw a CallFuncException, etc, and say it doesn't exist.
	TagDefs.cs, TagDef.cs:
	(SL)	Greatly simplified and improved tag-defs. They'll take slightly more memory total now, but work a lot better.
			Specifically, I've eliminated BoundedTagDef and moved all its bounds-checking and setting code into TagDef,
			and added a bool bounded member, as well as functions to enable the bounding and to disable it, and
			added methods to Script and to TagDefs to "create" bounded tag defs. Furthermore, these will actually not
			cause conflicts with existing TagDefs with the same name, because if they exist, they are marked bounding
			and such instead of creating two defs with the same name (Which wasn't a good thing). This also corrects
			a number of other bugs.
	WorldLoader, WorldSaver, TagDefs, TagDef:
	(SL)	TagDefs are no longer saved (They no longer need to be).

Jan 20, 2004:
	Server.cs, Statics.cs, Coords.cs (new):
	(SL)	Added CanSee and CanReach methods which work on coordinates (In addition to the ones which work on Things),
			and made CanSee and CanReach check statics for being in the way as well. Also made a Coords class.
	(SL)	Added some naturaldocs comments to Server.cs, and changed some access restrictions on some things.
	Account.cs:
	(SL)	Removed debug password testing messages.
	Main.cs, InPackets.cs, PacketHandler.cs, Server.cs:
	(SL)	Added INI option named 'blockOSI3DClient', which does what you would expect - It blocks the OSI 3D
			client. It's on by default.
	Effects.cs:
	(SL)	TODO: Class for UID arrays, and converting the global Effects arrays to use one.
			When already touching effects, you could add somehow sector sleeping... -tar
	Conn.cs:
	(SL)	Added seenCreatures and methods related to GameConn, allowing optimized sending of 'forget creature'
			packets and such.
	Creature.cs, Thing.cs, Item.cs:
	(SL)	These objects use a coords object to hold their x/y/z/m coordinates now. P has been added as a command,
			Go has been revised, as well as anything else which used _x, etc. I've also improved various other
			methods related to updating client and such when movement or teleporting is done. (Update, Resend, UpdateX,
			etc)
	Sectors.cs, Map.cs, Sector.cs, and other files:
	(SL)	These have been made partially ready for the addition of support for multiple map files later on.
			(TODO): Finish writing what I've changed. :P
	OutPackets.cs:
	(SL)	Added SendPreventItemPickup and SendPreventItemDrop, which, respectively, send a packet to tell the 
			client it isn't alloed to pick up the item it just tried to pick up, or wasn't allowed to drop the 
			item it just tried to drop where it just tried to drop it.

Jan 19, 2004:
	WorldLoader.cs and WorldSaver.cs:
	(SL)	The folder names for times is now of the pattern HH.MMXX, where XX is AM or PM. Also, when loading backups,
			SE makes sure to check the newest folder first, and so on (It sorts them by time). Additionally, it still
			knows about and understands folders named with the old time format (HH-MM-SS.sav), and so is completely
			backwards-compatible with backups in the old folder names. Also, SE no longer assumes GetDirectories sorts
			filenames for us (when we request a list of directories). SE will always sort them properly itself now,
			by the date	or time specified in the folder's name. To quote the comment I left after changing the two 
			sections of code which assumed the OS or .NET sorted filenames returned by GetDirectories:
			//Don't assume they're sorted by GetDirectories; the MSDN docs don't specify that it
			//does that, therefore different implementations of it might not sort them for us.
			//(I'm thinking of .GNU and MONO.NET).
			
			Also, the new time format wouldn't be sorted correctly by the OS either, but that's not why the sorting
			was added.
	Main.cs, Importer.cs, Animdata.cs, whoknowswhatelse
	(tar)		Added an INI setting - scriptsPath. it is the path to the directory that was "\scripts" until now.
			Compiled scripts now save the compiled file as a DLL, and when the Dll is older than any of the script files,
			the script assembly is loaded from the dll instead of compiling.
	scripts\defaults\types\System.cs
	(tar)		Began to write testing triggergroup and scripted Item subclass TestItem for testing triggers.
			Added a sphere-like "Events" command to tagholder (events("+e_foo"), events("-e_bar"), etc.)
	Script.cs
	(tar)		In compiled triggers the first argument can now be not only TagHolder, but also it`s subclass.
	InPacket.cs, Thing.cs and its subclasses:
	(tar)		Made Dropon_Obj, Stackon, AfterStackon, Dropon_ground triggers, with all the cahr* and item* versions.

Jan 18, 2004:
	Imports.cs:
	(SL)	Fixed a bug where numbers with decimal points wasn't being converted properly.
	WorldLoader.cs:
	(SL)	The 'saves' folder will be created now if it does not exist, prior to attempting to find
			saves in it.

Jan 17, 2004:
	ScriptCode.cs:
	(SL)	PScript is further refined and debugged. More on the way.
	Main.cs:
	(SL)	The code that finds the C#, VB.NET, and JScript scripts to compile now looks in all folders in the scripts
			folder, rather than just in scripts/defaults. Thus it will check the custom folder as well.
	Thing.cs and its subclasses:
	(SL)	Mostly finished up the weight stuff, and tested it. Found a bug though:

Jan 16, 2004:
	Tagholder.cs and <it`s subclasses>.cs
	(tar)		Finished stuff with duping and splitting Things, using copying constructors and Dupe method.
			Added a AddItemSilently method to IContainer, which is an method to add item to container,
			without any checking of pre-requisites and without calling triggers. It`s intended for the duping stuff.
			Also tried to optimize packet sending when picking up and dropping items.
	(SL)	HasTag and HasTriggerGroup use ContainsKey (on the hashtable) to determine if the tag or TG exist now.
			HasEffect still has to check if the effect is deleted (if it exists), so it still attempts to actually
			key the effect by its TagDef. Also, added GetTag0 and SetTag0, which work as per 55R3's tag0 (Returning
			0 if the tag doesn't exist, and erasing the tag if it's set to 0, respectively). GetTag0 always returns
			a Decimal.
	Thing.cs and its subclasses:
	(SL)	Thing has a 'weight' property now, along with FixWeight. These are further implemented for containers.
			There's also a flag for both Creatures and Items (and subclasses) named Weightless, and another for
			not counting the weight of contents (for Creatures and Containers) (Two properties for that one, 
			WeighContents and DontWeighContents, they go to the same flag). (Weight needs further testing to make sure
			it works properly)
			
Jan 15, 2004:
	Sectors.cs, Sectors.cs, Statics.cs:
	(SL)	Statics-loading code has been written and tested for sectors now. More work has to be done on it,
			though, it's not completely done yet. After that, it'll be added to LOS and collision checks and such.
			By the way, statics.txt (same folder as changes.txt) contains some statistics
			related to statics on the default OSI map (Map 0, not Ileshnar (sp) or Malas).
	PScript:
	(SL)	The basic PScript construction code has been finished and tested, specifically, these functions:
			ConstructFromPScript(BufferedScript), PruneExtraSpaces, PreParseParens, 
			ConstructFromPScript(string, int, int), and GetElements.
			
			GetElements and ConstructFromPScript (the one which takes a string, not the one which takes a BufferedScript)
			recursively call each other while parsing a PScript script to create the ScriptCode tree for that script.
			
			Run hasn't been tested yet (for running PScript scripts), and various ops still need to be coded (some have
			been already, mainly the ones related to math), before the execution of PScript scripts can be tested &
			debugged.
			
Jan 14, 2004:
	Exceptions.cs, Various files:
	(SL)	Added a FatalException class which is extended by ShowMessageAndExitException and SEBugException (also new),
			and now when one of those is thrown, it will be propagated up the stack until it's caught in WinMain or Main
			and displayed properly. Note that whenever you catch Exception, you have to also catch and re-throw 
			FatalException BEFORE your catch Exception block. Take a look at how this is done in any script that 
			has "catch (FatalException" in it (omit quotes) except for Main.cs, since that has the final code that handles
			it.
	PropsFileLoader.cs:
	(SL)	Fixed a bug where the final def in a file wasn't being passed to 'method' if the file did not end in [eof].
!!!!(Bug)	Triggers and such still aren't passed to 'method' if they're at the end of the file - whether or not
			[eof] exists. tar said he'll fix this.
	Fixed. -tar
	PScript stuff:
	(SL)	Still working on it. Running tests and debugging the construction (from PScript code in scripts) code. 
			The SEBug stuff is very useful, it's caught bugs in my code already. :P
			
Jan 13, 2004:
	ThingDef.cs:
	(SL)	Any ItemDef without a name will return the name from tiledata.mul for its model #. I.E. Itemdef scripts
			without a name will work now.
			
Jan 11, 2004:
	Creature.cs, Inpackets.cs, Triggerdefs.cs, etc.
	(tar)		Done changing DClick trigger according to the new schema.
			Added WarModeChange trigger.

Jan 11, 2004:
	(tar)		Planned changes: Code cleaning :) every core trigger should get one static method on the basic class it is used on, 
			and one virtual method that does the "default/hardcoded action". 
			The static method (called Trigger_Something) will be used by the source of the action (or by scripts) to fire it, 
			its first argument should always be the default object of the action, second argument the source, 
			return value should be false by default, true if the trigger is cancellable and was cancelled. 
			Note that it can be cancelled only by scripted triggers, and if it is cancelled, the virtual On_something method is not even run.
			SphereArgs are also constructed in this method, and also is verified that change of Server.src made by one trigger is not passed to another trigger.
			The virtual method (called On_Something) will be used to enable scripting by subclassing basic types, it has no default arguments, source should be Server.src.  
			This method should only be called from the static method Trigger_something - it is protected.
			I.E. we want it to be possible to script similar way you script in RunUO AND still fully support sphere-style scripting.
			For ingame actions that are "directly" fired by an packet (like dclick, etc.), the schema should be following: 
			The packet is receieved in PacketHandler instance, a HandleXXX method in InPacket is run, which verifies
			legality of the packet. I.E. if UIDs do exist, if the character has rights to do that, if he can reach the target, LOS, etc.
			Then the Trigger_something method will be called by the InPacket. I hope it will work :)
	(tar)		(TODO): Another planned change: coding "copying constructors" for all Things (ie. tagholder, Effect, Thing, Item, Creature, etc.)
			We don`t want to use any default .NET object copying if possible. This constructor will be used to split items and dupe things.
			It will be run via an virtual method Dupe(), which will return a valid(!) duped item.
	(tar)		Done changing Click trigger according to the new schema.
	(tar)		Removed model and name from arguments of constructors of types derived from Thing.
			Hopefully I wiped this need for constructor from every possible place...
			They get ThingDef, so they can get the default name and model from it.
			(TODO): changing binary save not to count name and model as values to save with constructor...
				binary save also needs to stop saving contained items for containers at 2 places (at the container and at the item itself)
			(TODO - DONE): interface of setting and getting name and model of Creature and Item should be somehow unified...
			maybe with a Thing property that gets overridden by them. Anyway, right now is it quite confusing.
			so: instead of GetRealName will be the property Name and GetName will have an argument - a bitmask saying if it should be 
			singular/plural name and if amount number should be included.
			

Jan 10, 2004:
	Imports.cs:
	(SL)	The importer now recognizes ON=, etc, regardless of case. It also imports tag.whatever=blah in defs.
	ScriptCode.cs:
	(SL)	Still workin' on it.
	

Jan 08 and 09, 2003:
	ScriptCode.cs:
	(SL)	Mostly continued working on PScript. :P
	
Jan 07, 2004:
	MethodInvoker.cs, MemberWrapper.cs, Script.cs:
	(tar)		Renamed class and file MethodInvoker to MemberWrapper, and added wrappers for other members than method. 
			Now there are 4 "helper" classes in MemberWrapper.cs (that actually shadow the MemberInfo derived classes): 
			MethodWrapper, PropertyWrapper, FieldWrapper, ConstructorWrapper.
			Switched MIScriptDef back to work, tested (characters are no more naked when created :)
			There are now actually 3 subclasses in place of one MIScriptDef. I disliked the fact that for each call, 
			some redundant conditions were checked. If there were anonymous classes in .NET, this would be perfect place to use them :)
			Changed ThingDef and it`s derived classes to use ConstructorWrapper instead of ConstructorInfo to create new Things.

Jan 07, 2004:
	ThingDef.cs, ThingDefs.cs, ItemDef.cs, CharDef.cs:
	(SL)	Changed the LoadLine functions in ThingDef, ItemDef, and CharDef back to not passing a line number,
			and made the remaining WriteError messages in scripts throw ScriptException instead, which is caught
			higher up and the proper line number displayed then.
	(SL)	Added two new INI options to the scripts section: overrideIdenticallyNamedScripts and allowReferencingImpliedTriggerGroups.
			These are both off by default, but can be turned on to enable specific features.


Jan 06, 2004:
	ThingDef.cs, ThingDefs.cs, ItemDef.cs, CharDef.cs:
	(SL)	Added some more comments to ThingDef.cs.
	(SL)	Fixed 'itemis=Some numbers' so that it works for numbers larger than a byte, and doesn't throw an exception,
			instead giving a reasonable error message on failure.
	(SL)	Fixed the issue which was causing c_ and i_ to be prepended to defnames even when they were non-numerical.
			(Only numerical defnames should have these).
	(SL)	Moved ConvertFlags from ItemDef and CharDef to ThingDef, as ConvertItemFlags and ConvertCharFlags.
			ConvertFlags in ItemDef and CharDef call the appropriate one, and the 'itemis' keyword in ThingDef now uses
			ConvertItemFlags, so we don't have duplication of code related to item flags anymore.
	(SL)	Changed a number of blocks of code which convert strings possibly beginning with 0x, so that they all call
			TagMath.ConvertTo instead, since it handles this itself innately.
	(SL)	Removed some commented out blocks of code which tar replaced with the WorldLoader stuff, since
			said WorldLoader stuff works very nicely.
	(SL)	Changed the LoadLine functions in ThingDef, ItemDef, and CharDef to include the line # as a parameter, for
			use in error messages. This does not interfere with the LoadLine in TagHolder, which will still be called
			when necessary.
	(SL)	Re-enabled the delayed-resolving for triggergroups specified in a def, since not all scripts can be 
			guaranteed to be loaded when triggergroups are read from a def. Also got "type" and "event" to be aliases
			for "triggergroup" (along with "events").

	TagHolder.cs:
	(SL)	"type" and "event" are valid aliases for "triggergroup" (along with "events") here as well.

	Script.cs:
	(SL)	SScriptDef is being used again until tar can get MethodInvoker and MIScriptDef finished. I.E. New characters
			won't be naked anymore, etc.
			
Jan 05, 2004:
	PScript/ScriptCode.cs:
	(SL)	Coding more parts of this.

Jan 04, 2004:
	PScript/ScriptCode.cs:
	(SL)	Coding various parts of this.
	
	BufferedScript.cs:
	(SL)	This is a new file which will buffer a section of a script - PScript will be handed one of these for each
			script section it needs to parse (Every on=@whatever section, for instance).
Jan 03, 2004:
	Accounts.cs: 
	(SL)	Password hashing debugged, tested, and is working now. (Saving hashed passwords was working, but loading wasn't.)
	(SL)	Save version 5 is read correctly now.
	(SL)	Save version increased to 6. Plevel is saved in addition to maxPlevel now.
